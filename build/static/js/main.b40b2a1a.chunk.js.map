{"version":3,"sources":["components/App/images/threebackground.jpg","components/App/images/clouds1.jpg","components/App/images/clouds2.jpg","components/App/images/yinYang.jpg","components/App/images/earth.jpg","components/App/images/metal.jpg","components/App/images/water.jpg","components/App/images/fire.jpg","components/App/images/wood.jpg","redux/reducers/errorsReducer.js","redux/reducers/loginModeReducer.js","redux/reducers/userReducer.js","redux/reducers/gameReducer.js","redux/reducers/codeReducer.js","redux/reducers/cardReducer.js","redux/reducers/gamesReducer.js","redux/reducers/chatReducer.js","redux/reducers/deckReducer.js","redux/reducers/selectedGameReducer.js","redux/reducers/index.js","redux/sagas/loginSaga.js","redux/sagas/registrationSaga.js","redux/sagas/userSaga.js","redux/sagas/playersSaga.js","redux/sagas/cardSaga.js","redux/sagas/gamesSaga.js","redux/sagas/rejoinSaga.js","redux/sagas/chatSaga.js","redux/sagas/deckSaga.js","redux/sagas/index.js","components/AboutPage/AboutPage.js","components/Game/Game.js","components/LogOutButton/LogOutButton.js","components/Nav/Nav.js","components/App/Background.js","components/LoginPage/LoginPage.js","components/InfoPage/Select.js","components/RegisterPage/RegisterPage.js","components/ProtectedRoute/ProtectedRoute.js","components/UserPage/UserPage.js","components/InfoPage/QuestionForm.js","components/Card/Card.js","components/InfoPage/InfoPage.js","components/InfoPage/Button.js","components/AdminPage/FacilitatorForm.js","components/AdminPage/AdminPage.js","components/ResultsPage/ResultsPage.js","components/Game/GameRounds/Discussion.js","components/Game/GameRounds/RoundIntro.js","components/Game/GameRounds/AnswerCard.js","components/Game/GameRounds/GameRounds.js","components/Game/PostGame/PostGame.js","components/Game/GameStart/IntentionInput.js","components/Game/GameStart/IntentionIntro.js","components/Game/GameStart/GameLobby.js","components/Game/GameStart/GameStart.js","components/Game/PreGame/PlayerLogin.js","components/Game/PreGame/FacilitatorLogin.js","components/Game/PreGame/FacilitatorCreateGame.js","components/Game/PreGame/PreGame.js","components/Game/Journal.js","components/Game/FacilitatorSidebar.js","components/Game/PlayInstructions.js","components/Game/Sidebar.js","components/Game/Chat.js","components/Game/ActionPanel.js","components/Game/modules/receiver.js","components/App/App.js","index.js"],"names":["module","exports","__webpack_require__","p","combineReducers","loginMessage","state","arguments","length","undefined","type","registrationMessage","loginMode","userReducer","action","payload","userType","game","gameState","newGameState","player","Object","objectSpread","journal","_objectSpread2","intention","question_one","question_two","question_three","question_four","question_five","response_one","response_two","response_three","response_four","response_five","question","concat","roundNumber","response","defineProperty","allPlayers","selectedPlayer","gameCode","cards","originalCards","filter","card","stage_id","Number","id","text","games","chat","deck","decks","selectedDeck","description","cards_in_deck","selectedGame","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","item","value","err","return","rootReducer","errors","user","loginUser","logoutUser","loginSaga","config","regenerator_default","a","wrap","_context","prev","put","headers","Content-Type","withCredentials","axios","post","t0","console","log","status","stop","_marked","this","_context2","_marked2","_context3","takeLatest","_marked3","registerUser","registrationSaga","registrationSaga_marked","registrationSaga_marked2","fetchUser","userSaga","get","sent","data","userSaga_marked","userSaga_marked2","fetchPlayers","fetchPlayer","fetchJournal","playersSaga","call","method","url","params","playersSaga_marked","playersSaga_marked2","playersSaga_marked3","_context4","_marked4","fetchCards","fetchSpecificCard","addCard","editCard","deleteCard","fetchDeckCards","cardSaga","cardSaga_marked","cardSaga_marked2","cardSaga_marked3","cardSaga_marked4","_context5","delete","_marked5","_context6","_marked6","_context7","_marked7","fetchGames","fetchGame","gamesSaga","gamesSaga_marked","gamesSaga_marked2","gamesSaga_marked3","rejoinGamePlayer","rejoinGameFacilitator","rejoinSaga","identifier","code","name","playerId","gameId","journalId","rejoinSaga_marked","rejoinSaga_marked2","rejoinSaga_marked3","fetchChat","chatSaga","chatSaga_marked","chatSaga_marked2","fetchDecks","fetchDeckContent","addDeck","editDeck","deleteDeck","deckSaga","deckSaga_marked","deckSaga_marked2","deckSaga_marked3","deckSaga_marked4","deckSaga_marked5","deckSaga_marked6","rootSaga","all","sagas_marked","socket","connect","props","react_default","createElement","className","onClick","dispatch","Link","to","Fragment","components_LogOutButton_LogOutButton","Background","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","speedArchitect","max","subSteps","blueprint","subSpeeds","map","speed","currentPoint","push","i","parseInt","rotateBackground","numOfSegments","background","rotation","z","Math","PI","moveSphereForward","input","pointsArrayOutside","pointsArrayInside","sphere","pointsMetalOutside","pointsMetalInside","metal","pointsWaterOutside","pointsWaterInside","water","pointsWoodOutside","pointsWoodInside","wood","pointsFireOutside","pointsFireInside","fire","pointsEarthOutside","pointsEarthInside","earth","easedArray","backwards","b","position","x","y","yinYang","requestAnimationFrame","moveSphereBack","counter","start","bind","assertThisInitialized","animate","width","mount","clientWidth","height","clientHeight","scene","THREE","camera","set","renderer","antialias","setViewport","light1","light2","light3","light4","light5","add","backgroundTexture","load","require","geoBackground","matBackground","receiveShadow","textureClouds1","geoClouds1","matClouds1","alphaMap","clouds1","transparent","textureClouds2","geoClouds2","matClouds2","clouds2","textureYinYang","geoYinYang","matYinYang","bumpMap","overdraw","castShadow","textureEarth","geoEarth","matEarth","textureMetal","geoMetal","matMetal","textureWater","geoWater","matWater","textureFire","geoFire","matFire","textureWood","geoWood","matWood","createBezierCurve","c","d","getPoints","setClearColor","setSize","appendChild","domElement","removeChild","frameId","cancelAnimationFrame","renderScene","window","render","_this2","ref","React","cloneElement","children","Component","LoginPage","username","password","login","event","preventDefault","handleInputChangeFor","propertyName","setState","target","role","onSubmit","htmlFor","onChange","Select","for","title","handleChange","disabled","placeholder","options","option","key","label","RegisterPage","first_name","last_name","email","organization","phone_number","is_facilitator","is_admin","is_facilitator_options","is_admin_options","InfoPage_Select","ComponentToShow","ComponentToProtect","component","otherProps","objectWithoutProperties","Route","assign","AboutPage","advance","facilitatorId","join","playerName","discussion","playerNumber","setTo","testActionOne","emit","testActionTwo","testActionThree","testActionFour","startGame","json","then","io","on","catch","endGame","handleAdvance","prop","handleJoin","handleJournal","handleDiscussion","JSON","stringify","QuestionForm","newContent","editing","componentDidMount","handleChangeFor","handleDelete","swal","icon","buttons","dangerMode","willDelete","handleSubmit","decksToAddTo","flipCard","style","marginLeft","resize","Card","isFlipped","classNameSwitch","flipped","prevProps","editable","String","InfoPage_QuestionForm","CardPage","allCardsWithCheckBoxes","deckToAdd","viewing","categorySelected","deckSelected","searchText","dispatchDeckToPost","filterByText","updatedCards","toLowerCase","search","filterByCategory","categoryId","numCategory","filterByDeck","deckId","numDeck","indexOf","combinedFilter","subState","handleChangeForDeckCheckbox","copy","toConsumableArray","copyIndex","findIndex","checked","prevState","margin","components_Card_Card","_ref","Button","FacilitatorForm","newFacilitator","facilitator","handleUpdate","handleDeleteFacilitator","handleFormSubmit","handleClearForm","handleInput","e","_this3","about","_this4","error","fName","lName","InfoPage_Button","buttonStyle","AdminPage","getFacilitatorInfo","umd","AdminPage_FacilitatorForm","facilitatorPanels","createHtmlForPanel","ResultsPage","emailSent","submitEmail","Axios","alert","Discussion","current_card","markDone","advanceStage","calculateNextStage","RoundIntro","dealCards","AnswerCard","GameRounds","GameRounds_RoundIntro","GameRounds_AnswerCard","editJournal","advanceToDiscussion","GameRounds_Discussion","selectPlayer","PostGame","IntentionInput","IntentionIntro","GameLobby","GameStart_GameLobby","GameStart_IntentionIntro","GameStart_IntentionInput","editIntention","PlayerLogin","info","joinRejoin","joinGame","FacilitatorLogin","FacilitatorCreateGame","active","facilitatorJoinGame","PreGame","setTimeout","PreGame_PlayerLogin","PreGame_FacilitatorCreateGame","createGame","PreGame_FacilitatorLogin","Journal","openQuestionNumber","questionKey","display","question_one_tab","classList","remove","question_two_tab","question_three_tab","question_four_tab","question_five_tab","FacilitatorSidebar","gameConfig","maxPlayers","showDirections","deck_id","max_players","can_kick","show_directions","canKick","PlayInstructions","Sidebar","trigger","triggerSidebar","sidebar","Game_FacilitatorSidebar","Game_Journal","Game_PlayInstructions","Chat","newMessage","triggerChatPanel","chatPanel","messageSubmit","sendMessage","maxScrollTop","chatBox","scrollHeight","scrollTop","scrollToBottom","message","classes","from","float","clear","el","messagesEnd","ActionPanel","triggerActionPanel","actionPanel","selectGame","in_game","history","in_discussion","discussed","withRouter","resetDiscussion","actions","reduxActionOne","reduxActionTwo","reduxActionThree","receiver","Game","_callee","boolean","reJoin","journal_id","nextStage","number","newRound","toString","disconnectSocket","_callee2","removeEventListener","addEventListener","Game_Sidebar","Game_ActionPanel","GameStart","Game_PreGame_PreGame","Game_GameRounds_GameRounds","Game_PostGame_PostGame","Game_Chat","App","HashRouter","Switch","Redirect","exact","path","App_Background","components_Game_Game","components_Nav_Nav","InfoPage","components_AdminPage_AdminPage","sagaMiddleware","createSagaMiddleware","middlewareList","store","createStore","applyMiddleware","apply","run","ReactDOM","react_redux_es","components_App_App","document","getElementById"],"mappings":"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","file":"static/js/main.b40b2a1a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/threebackground.ccd5d78d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/clouds1.220d21dc.jpg\";","module.exports = __webpack_public_path__ + \"static/media/clouds2.3bdaad83.jpg\";","module.exports = __webpack_public_path__ + \"static/media/yinYang.bce89b8d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/earth.03827279.jpg\";","module.exports = __webpack_public_path__ + \"static/media/metal.76d64929.jpg\";","module.exports = __webpack_public_path__ + \"static/media/water.a198e7aa.jpg\";","module.exports = __webpack_public_path__ + \"static/media/fire.219275a6.jpg\";","module.exports = __webpack_public_path__ + \"static/media/wood.e57e2628.jpg\";","import { combineReducers } from 'redux';\n\n// loginMessage holds the string that will display\n// on the login screen if there's an error\nconst loginMessage = (state = '', action) => {\n  switch (action.type) {\n    case 'CLEAR_LOGIN_ERROR':\n      return '';\n    case 'LOGIN_INPUT_ERROR':\n      return 'Enter your username and password!';\n    case 'LOGIN_FAILED':\n      return 'Oops! The username and password didn\\'t match. Try again!';\n    case 'LOGIN_FAILED_NO_CODE':\n      return 'Oops! Something went wrong! Is the server running?';\n    default:\n      return state;\n  }\n};\n\n// registrationMessage holds the string that will display\n// on the registration screen if there's an error\nconst registrationMessage = (state = '', action) => {\n  switch (action.type) {\n    case 'CLEAR_REGISTRATION_ERROR':\n      return '';\n    case 'REGISTRATION_INPUT_ERROR':\n      return 'Choose a username and password!';\n    case 'REGISTRATION_FAILED':\n      return 'Oops! That didn\\'t work. The username might already be taken. Try again!';\n    default:\n      return state;\n  }\n};\n\n// make one object that has keys loginMessage, registrationMessage\n// these will be on the redux state at:\n// state.errors.loginMessage and state.errors.registrationMessage\nexport default combineReducers({\n  loginMessage,\n  registrationMessage,\n});\n","const loginMode = (state = 'login', action) => {\n    switch (action.type) {\n      case 'SET_TO_LOGIN_MODE':\n        return 'login';\n      case 'SET_TO_REGISTER_MODE':\n        return 'register';\n      default:\n        return state;\n    }\n  };\n\n// loginMode will be on the redux state at:\n// state.loginMode\n  export default loginMode;\n  ","import { combineReducers } from 'redux';\n\nconst userReducer = (state = {}, action) => {\n  switch (action.type) {\n    case 'SET_USER':\n      return action.payload;\n    case 'UNSET_USER':\n      return {};\n    default:\n      return state;\n  }\n};\n\nconst userType = (state = '', action) => {\n  switch (action.type) {\n    case 'SET_USER_TYPE':\n      return action.payload;\n    default:\n      return state;\n  }\n}\n\n// user will be on the redux state at:\n// state.user\n\nexport default combineReducers({\n  userReducer,\n  userType,\n});\n","import { combineReducers } from 'redux';\n\nconst game = (state = '', action) => {\n    switch (action.type) {\n        case 'SET_GAME':\n            return action.payload;\n        default:\n            return state;\n    }\n};\n\nconst gameState = (state =  '00', action) => {\n    switch (action.type) {\n        case 'UPDATE_GAME_STATE':\n            return action.payload.newGameState;\n        default:\n            return state;\n    }\n};\n\n\n\nconst journal = (state = {intention: '', question_one: '', question_two: '', question_three: '', question_four: '', question_five: '', response_one: '', response_two: '', response_three: '', response_four: '', response_five: '' }, action) => {\n    switch (action.type) {\n        case 'UPDATE_JOURNAL_QUESTION':\n            let question = `question_${action.payload.roundNumber}`;\n            let response = `question_${action.payload.roundNumber}`;\n            return {\n                ...state,\n                [question]: action.payload.question,\n                [response]: action.payload.response,\n            };\n        case 'UPDATE_INTENTION':\n            return {\n                ...state,\n                intention: action.payload.intention,\n            }\n        case 'UPDATE_JOURNAL_INTENTION':\n            return {\n                ...state,\n                intention: action.payload.intention,\n            }\n        case 'SET_JOURNAL':\n            return action.payload;\n        default:\n            return state;\n    }\n};\n\nconst player = (state = {}, action) => {\n    switch (action.type) {\n        case 'SET_PLAYER':\n            return {\n                ...action.payload,\n            };\n        default:\n            return state;\n    }\n};\n\nconst allPlayers = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_ALL_PLAYERS':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\nconst roundNumber = (state = '0', action) => {\n    switch (action.type) {\n        case 'UPDATE_ROUND_NUMBER':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\nconst selectedPlayer = (state = {}, action) => {\n    switch (action.type) {\n        case 'SET_SELECTED_PLAYER':\n            return action.payload.player;\n        case 'CLEAR_SELECTED_PLAYER':\n            return {};\n        default:\n            return state;\n    }\n}\n\nexport default combineReducers({\n    game,\n    gameState,\n    player,\n    journal,\n    allPlayers,\n    roundNumber,\n    selectedPlayer,\n});\n","const gameCode = (state = '', action) => {\n    switch(action.type) {\n        case 'SET_CODE':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\n\n\n\nexport default gameCode;","const cards = (state = { originalCards: [], cards: [] }, action) => {\n    switch (action.type) {\n        case 'SET_CARDS':\n            return { originalCards: action.payload, cards: action.payload };\n        case 'CLEAR_CARD_FILTER':\n            return { ...state, cards: state.originalCards };\n        case 'FILTER_CARDS_BY_CATEGORY':\n            return { ...state, cards: state.originalCards.filter(card => card.stage_id === Number(action.payload)) }\n        case 'FILTER_CARDS_BY_DECK':\n            return { ...state, cards: action.payload };\n        case 'SET_SPECIFIC_CARD':\n            return {\n                ...state,\n                card: {\n                    id: action.payload.id,\n                    stage_id: action.payload.stage_id,\n                    text: action.payload.text,\n                    type: action.payload.type\n                }\n            }\n        default:\n            return state;\n    }\n}\n\n\n\n\nexport default cards;","const games = (state = [], action) => {\n    switch(action.type) {\n        case 'SET_GAMES':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\n\n\n\nexport default games;","const chat = (state = [], action) => {\n    switch(action.type) {\n        case 'SET_CHAT':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\n\n\n\nexport default chat;","const deck = (state = {\n    decks: [],\n    selectedDeck: {\n        description: 'no selected deck',\n        cards: []\n    }\n}, action) => {\n    switch (action.type) {\n        case 'SET_DECKS':\n            return {\n                ...state,\n                decks: action.payload\n            };\n        case 'SET_SELECTED_DECK':\n            return {\n                ...state,\n                selectedDeck: {\n                    description:action.payload.description,\n                    cards:action.payload.cards_in_deck\n                }\n            }\n        default:\n            return state;\n    }\n}\nexport default deck;","const selectedGame = (state = {}, action) => {\n    switch(action.type) {\n        case 'SELECT_GAME':\n            let result;\n            for (let item of action.payload.games) {\n                if (item.id == Number(action.payload.id)){\n                    result = item;\n                    return result;\n                }\n            }\n        case 'CLEAR_SELECT_GAME':\n            return {};\n        default:\n            return state;\n    }\n}\n\n\nexport default selectedGame;","import { combineReducers } from 'redux';\nimport errors from './errorsReducer';\nimport loginMode from './loginModeReducer';\nimport user from './userReducer';\nimport game from './gameReducer';\nimport gameCode from './codeReducer';\nimport cards from './cardReducer'\nimport games from './gamesReducer';\nimport chat from './chatReducer';\nimport decks from './deckReducer';\nimport selectedGame from './selectedGameReducer';\n\n// rootReducer is the primary reducer for our entire project\n// It bundles up all of the other reducers so our project can use them.\n// This is imported in index.js as rootSaga\n\n// Lets make a bigger object for our store, with the objects from our reducers.\n// This is what we get when we use 'state' inside of 'mapStateToProps'\nconst rootReducer = combineReducers({\n  errors, // contains registrationMessage and loginMessage\n  loginMode, // will have a value of 'login' or 'registration' to control which screen is shown\n  user, // will have an id and username if someone is logged in\n  game, //stores all game state data for client\n  gameCode,\n  cards,\n  games,\n  chat,\n  decks,\n  selectedGame,\n});\n\nexport default rootReducer;\n","import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// worker Saga: will be fired on \"LOGIN\" actions\nfunction* loginUser(action) {\n  try {\n    // clear any existing error on the login page\n    yield put({ type: 'CLEAR_LOGIN_ERROR' });\n\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // send the action.payload as the body\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    yield axios.post('api/user/login', action.payload, config);\n    \n    // after the user has logged in\n    // get the user information from the server\n    yield put({type: 'FETCH_USER'});\n  } catch (error) {\n    console.log('Error with user login:', error);\n    if (error.response.status === 401) {\n      // The 401 is the error status sent from passport\n      // if user isn't in the database or\n      // if the username and password don't match in the database\n      yield put({ type: 'LOGIN_FAILED' });\n    } else {\n      // Got an error that wasn't a 401\n      // Could be anything, but most common cause is the server is not started\n      yield put({ type: 'LOGIN_FAILED_NO_CODE' });\n    }\n  }\n}\n\n// worker Saga: will be fired on \"LOGOUT\" actions\nfunction* logoutUser(action) {\n  try {\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    // when the server recognizes the user session\n    // it will end the session\n    yield axios.post('api/user/logout', config);\n\n    // now that the session has ended on the server\n    // remove the client-side user object to let\n    // the client-side code know the user is logged out\n    yield put({ type: 'UNSET_USER' });\n\n  } catch (error) {\n    console.log('Error with user logout:', error);\n  }\n}\n\nfunction* loginSaga() {\n  yield takeLatest('LOGIN', loginUser);\n  yield takeLatest('LOGOUT', logoutUser);\n}\n\nexport default loginSaga;\n","import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// worker Saga: will be fired on \"REGISTER\" actions\nfunction* registerUser(action) {\n  try {\n    // clear any existing error on the registration page\n    yield put({ type: 'CLEAR_REGISTRATION_ERROR' });\n\n    // passes the username and password from the payload to the server\n    yield axios.post('api/user/register', action.payload);\n\n    // automatically log a user in after registration\n    yield put({ type: 'LOGIN', payload: action.payload });\n    \n    // set to 'login' mode so they see the login screen\n    // after registration or after they log out\n    yield put({type: 'SET_TO_LOGIN_MODE'});\n  } catch (error) {\n      console.log('Error with user registration:', error);\n      yield put({type: 'REGISTRATION_FAILED'});\n  }\n}\n\nfunction* registrationSaga() {\n  yield takeLatest('REGISTER', registerUser);\n}\n\nexport default registrationSaga;\n","import axios from 'axios';\nimport { put, takeLatest } from 'redux-saga/effects';\n\n// worker Saga: will be fired on \"FETCH_USER\" actions\nfunction* fetchUser() {\n  try {\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    // If a user is logged in, this will return their information\n    // from the server session (req.user)\n    const response = yield axios.get('api/user', config);\n\n    // now that the session has given us a user object\n    // with an id and username set the client-side user object to let\n    // the client-side code know the user is logged in\n    yield put({ type: 'SET_USER', payload: response.data });\n  } catch (error) {\n    console.log('User get request failed', error);\n  }\n}\n\nfunction* userSaga() {\n  yield takeLatest('FETCH_USER', fetchUser);\n}\n\nexport default userSaga;\n","import axios from 'axios';\nimport { put, takeLatest, call } from 'redux-saga/effects';\n\nfunction* fetchPlayers(action) {\n  try {\n    const response = yield call(axios, {method: 'GET', url: '/game/players', params: {id: action.payload}})\n    yield put({ type: 'SET_ALL_PLAYERS', payload: response.data });\n  } catch (error) {\n    console.log('players get request failed', error);\n  }\n}\n\nfunction* fetchPlayer(action) {\n  try {\n    const response = yield call(axios, {method: 'GET', url: '/game/player', params: {id: action.payload}})\n    yield put({ type: 'SET_PLAYER', payload: response.data });\n  } catch (error) {\n    console.log('player get request failed', error);\n  }\n}\n\nfunction* fetchJournal(action) {\n  try {\n    const response = yield call(axios, {method: 'GET', url: '/game/journal', params: {id: action.payload}})\n    yield put({ type: 'SET_JOURNAL', payload: response.data });\n  } catch (error) {\n    console.log('journal get request failed', error);\n  }\n}\n\nfunction* playersSaga() {\n  yield takeLatest('FETCH_PLAYERS', fetchPlayers);\n  yield takeLatest('FETCH_PLAYER', fetchPlayer);\n  yield takeLatest('FETCH_JOURNAL', fetchJournal);\n}\n\nexport default playersSaga;","import axios from 'axios';\nimport { put, takeLatest } from 'redux-saga/effects';\n\nfunction* fetchCards(action) {\n    try {\n        const response = yield axios.get('api/card')\n        yield put({ type: 'SET_CARDS', payload: response.data });\n    } catch (error) {\n        console.log('Error getting cards', error);\n    }\n}\n\nfunction* fetchSpecificCard(action) {\n    try {\n        const response = yield axios.get(`api/card/${action.payload}`)\n        yield put({ type: 'SET_SPECIFIC_CARD', payload: response.data });\n    } catch (error) {\n        console.log('Error getting cards', error);\n    }\n}\n\nfunction* addCard(action) {\n    try {\n        yield axios.post('api/card', action.payload)\n        yield put({ type: 'FETCH_CARDS' });\n        yield put({ type: 'FETCH_DECKS' });\n    } catch (error) {\n        console.log('Error adding card: ', error)\n    }\n}\nfunction* editCard(action) {\n    try {\n        yield axios.put('api/card', action.payload)\n        yield put({ type: 'FETCH_CARDS' });\n    } catch (error) {\n        console.log('Error updating card: ', error)\n    }\n}\nfunction* deleteCard(action) {\n    try {\n        yield axios.delete(`api/card/${action.payload}`);\n        yield put({ type: 'FETCH_CARDS' });\n        yield put({ type: 'FETCH_DECKS' });\n    } catch (error) {\n        console.log('Error deleting card', error);\n    }\n}\n\nfunction* fetchDeckCards(action) {\n    if (action.payload !== '0') {\n        try {\n            const response = yield axios.get(`api/deck/${action.payload}`)\n            yield put({ type: 'FILTER_CARDS_BY_DECK', payload: response.data });\n        } catch (error) {\n            console.log('Error getting cards', error);\n        }\n    } else {\n        yield put({type:'CLEAR_CARD_FILTER'})\n    }\n}\n\nfunction* cardSaga() {\n    yield takeLatest('FETCH_CARDS', fetchCards);\n    yield takeLatest('FETCH_SPECIFIC_CARD', fetchSpecificCard);\n    yield takeLatest('FETCH_DECK_CARDS', fetchDeckCards);\n    yield takeLatest('ADD_CARD', addCard);\n    yield takeLatest('EDIT_CARD', editCard);\n    yield takeLatest('DELETE_CARD', deleteCard);\n}\n\nexport default cardSaga;","import axios from 'axios';\nimport { put, takeLatest, call } from 'redux-saga/effects';\n\nfunction* fetchGames(action) {\n  try {\n    const response = yield call(axios, {method: 'GET', url: '/game/games'})\n    yield put({ type: 'SET_GAMES', payload: response.data });\n  } catch (error) {\n    console.log('games get request failed', error);\n  }\n}\n\nfunction* fetchGame(action) {\n  try {\n    const response = yield call(axios, {method: 'GET', url: '/game/game', params: {id: action.payload}})\n    yield put({ type: 'SET_GAME', payload: response.data });\n  } catch (error) {\n    console.log('game get request failed', error);\n  }\n}\n\nfunction* gamesSaga() {\n  yield takeLatest('FETCH_GAMES', fetchGames);\n  yield takeLatest('FETCH_GAME', fetchGame);\n}\n\nexport default gamesSaga;","import axios from 'axios';\nimport { put, takeLatest, call } from 'redux-saga/effects';\n\nfunction* rejoinGamePlayer(action) {\n  try { //later should fetch journal\n    const response = yield call(axios, {method: 'POST', url: '/game/rejoin', data: {type: 'player', identifier: action.payload.code, name: action.payload.name}})\n    console.log(response);\n    yield put({ type: 'FETCH_PLAYER', payload: response.data.playerId });  \n    yield put({ type: 'FETCH_PLAYERS', payload: response.data.gameId }); \n    yield put({ type: 'FETCH_CHAT', payload: response.data.gameId });  \n    yield put({ type: 'FETCH_JOURNAL', payload: response.data.journalId });  \n    yield put({ type: 'UPDATE_GAME_STATE', payload: {\n        newGameState: response.data.gameState,\n    } });  \n    yield put({ type: 'UPDATE_ROUND_NUMBER', payload: response.data.gameState[0]})\n} catch (error) {\n    console.log('rejoin game as player request failed', error);\n  }\n}\n\nfunction* rejoinGameFacilitator(action) {\n  try {\n    const response = yield call(axios, {method: 'POST', url: '/game/rejoin', data: {type: 'facilitator', identifier: action.payload}})\n    yield put({ type: 'FETCH_PLAYERS', payload: action.payload }); \n    yield put({ type: 'FETCH_CHAT', payload: response.data.gameId });  \n    yield put({ type: 'UPDATE_GAME_STATE', payload: {\n        newGameState: response.data.gameState,\n    } });  \n    yield put({ type: 'UPDATE_ROUND_NUMBER', payload: response.data.gameState[0]})\n  } catch (error) {\n    console.log('rejoin game as facilitator request failed', error);\n  }\n}\n\nfunction* rejoinSaga() {\n  yield takeLatest('REJOIN_GAME_PLAYER', rejoinGamePlayer);\n  yield takeLatest('REJOIN_GAME_FACILITATOR', rejoinGameFacilitator);\n}\n\nexport default rejoinSaga;","import axios from 'axios';\nimport { put, takeLatest, call } from 'redux-saga/effects';\n\nfunction* fetchChat(action) {\n  try {\n    const response = yield call(axios, {method: 'GET', url: '/game/get/chat', params: {id: action.payload}})\n    yield put({ type: 'SET_CHAT', payload: response.data });\n  } catch (error) {\n    console.log('chat get request failed', error);\n  }\n}\n\nfunction* chatSaga() {\n  yield takeLatest('FETCH_CHAT', fetchChat);\n}\n\nexport default chatSaga;","import axios from 'axios';\nimport { put, takeLatest } from 'redux-saga/effects';\n\nfunction* fetchDecks(action) {\n    try {\n        const response = yield axios.get('api/deck')\n        yield put({ type: 'SET_DECKS', payload: response.data });\n    } catch (error) {\n        console.log('Error getting decks', error);\n    }\n}\n\nfunction* fetchDeckContent(action) {\n    try {\n        const response = yield axios.get(`api/deck/${action.payload}`)\n        yield put({ type: 'SET_SELECTED_DECK', payload: response.data });\n    } catch (error) {\n        console.log('Error getting selected deck', error);\n    }\n}\n\nfunction* addDeck(action) {\n    try {\n        yield axios.post('api/deck', action.payload)\n        yield put({ type: 'FETCH_DECKS' });\n    } catch (error) {\n        console.log('Error updating deck: ', error)\n    }\n}\nfunction* editDeck(action) {\n    try {\n        yield axios.put('api/deck', action.payload)\n        yield put({ type: 'FETCH_DECKS' });\n    } catch (error) {\n        console.log('Error updating Deck: ', error)\n    }\n}\nfunction* deleteDeck(action) {\n    try {\n        yield axios.delete(`api/deck/${action.payload}`);\n        yield put({ type: 'FETCH_DECK' });\n    } catch (error) {\n        console.log('Error deleting deck', error);\n    }\n}\n\nfunction* deckSaga() {\n    yield takeLatest('FETCH_DECKS', fetchDecks);\n    yield takeLatest('SET_SELECTED_DECK', fetchDeckContent);\n    yield takeLatest('ADD_DECK', addDeck);\n    yield takeLatest('EDIT_DECK', editDeck);\n    yield takeLatest('DELETE_DECK', deleteDeck);\n}\n\nexport default deckSaga;","import { all } from 'redux-saga/effects';\nimport loginSaga from './loginSaga';\nimport registrationSaga from './registrationSaga';\nimport userSaga from './userSaga';\nimport playersSaga from './playersSaga';\nimport cardSaga from './cardSaga'\nimport gamesSaga from './gamesSaga';\nimport rejoinSaga from './rejoinSaga';\nimport chatSaga from './chatSaga';\nimport deckSaga from './deckSaga'\n\n// rootSaga is the primary saga.\n// It bundles up all of the other sagas so our project can use them.\n// This is imported in index.js as rootSaga\n\n// some sagas trigger other sagas, as an example\n// the registration triggers a login\n// and login triggers setting the user\nexport default function* rootSaga() {\n  yield all([\n    loginSaga(),\n    registrationSaga(),\n    userSaga(),\n    playersSaga(),\n    cardSaga(),\n    gamesSaga(),\n    rejoinSaga(),\n    chatSaga(),\n    deckSaga(),\n  ]);\n}\n","/** About Page\n * ****** WARNING *******\n * this page is for testing the server and socket connections\n * it is deprecated \n * this test UI worked with the first version of the server code\n * **********************\n * \n * This page remains here for any necessary reference\n * \n */\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n//set up a socket to test if the socket's are working\n//interface to enter an action, select a channel name, emit action, and display result.\nimport io from 'socket.io-client';\nimport axios from 'axios';\nlet socket;\n//test game state actions first\n\nclass AboutPage extends Component {\n  state = {\n    advance: {\n      type: 'advance',\n      data: {\n        newGameState: '',\n      },\n      facilitatorId: 1,\n    },\n    join: {\n      type: 'join',\n      data: {\n        playerName: '',\n      },\n    },\n    journal: {\n      type: 'journal',\n      data: {\n        playerName: '',\n        question: '',\n        response: '',\n        roundNumber: '',\n      },\n    },\n    discussion: {\n      type: 'discussion',\n      data: {\n        playerNumber: '',\n        setTo: true,\n      },\n      facilitatorId: 1,\n    },\n    gameCode: '',\n  }\n\n  testActionOne = event => {\n    event.preventDefault();\n    socket.emit('moves', this.state.advance);\n  }\n\n  testActionTwo = event => {\n    event.preventDefault();\n    socket.emit('join', this.state.join);\n  }\n\n  testActionThree = event => {\n    event.preventDefault();\n    socket.emit('moves', this.state.journal);\n  }\n\n  testActionFour = event => {\n    event.preventDefault();\n    socket.emit('moves', this.state.discussion);\n  }\n\n  startGame = () => {\n    //trigger server game start, get code back\n    axios({\n      method: 'POST',\n      data: { id: 1 },\n      url: '/game/start',\n      json: true\n    })\n      .then(response => {\n        this.setState({\n          gameCode: response.data.code,\n        })\n        socket = io.connect(`/${this.state.gameCode}`);\n        socket.on('moves', data => {\n          console.log('Back from server with', data);\n        })\n        socket.on('join', data => {\n          console.log('Back from server with', data);\n        })\n      })\n      .catch(err => {\n        console.log(err);\n      })\n  }\n\n  endGame = () => {\n    //trigger server game end \n    axios({\n      method: 'POST',\n      data: { id: 1 },\n      url: '/game/end',\n    })\n  }\n\n  handleAdvance = prop => event => {\n    this.setState({\n      advance: {\n        ...this.state.advance,\n        data: {\n          ...this.state.advance.data,\n          [prop]: event.target.value\n        }\n      }\n    })\n  }\n  handleJoin = prop => event => {\n    this.setState({\n      join: {\n        ...this.state.join,\n        data: {\n          ...this.state.join.data,\n          [prop]: event.target.value\n        }\n      }\n    })\n  }\n  handleJournal = prop => event => {\n    this.setState({\n      journal: {\n        ...this.state.journal,\n        data: {\n          ...this.state.journal.data,\n          [prop]: event.target.value\n        }\n      }\n    })\n  }\n  handleDiscussion = prop => event => {\n    this.setState({\n      discussion: {\n        ...this.state.discussion,\n        data: {\n          ...this.state.discussion.data,\n          [prop]: event.target.value\n        }\n      }\n    })\n  }\n\n  componentDidMount() {\n  }\n\n  render() {\n    return (\n      <div>\n        <div>\n          <button onClick={this.startGame}>Start Game (only press one time)</button>\n          <button onClick={this.endGame}>End Game</button>\n          <form onSubmit={this.testActionOne}>\n            <h2>Advance</h2>\n            <input\n              type=\"text\"\n              onChange={this.handleAdvance('newGameState')}\n              placeholder=\"next game state\"\n              value={this.state.advance.data.newGameState}\n            />\n            <input\n              type=\"submit\"\n            />\n          </form>\n          <form onSubmit={this.testActionTwo}>\n            <h2>Join</h2>\n            <input\n              type=\"text\"\n              onChange={this.handleJoin('playerName')}\n              placeholder=\"player name\"\n              value={this.state.join.data.playerName}\n            />\n            <input\n              type=\"submit\"\n            />\n          </form>\n          <form onSubmit={this.testActionThree}>\n            <h2>Journal</h2>\n            <input\n              type=\"text\"\n              onChange={this.handleJournal('playerName')}\n              placeholder=\"playerName\"\n              value={this.state.journal.data.playerName}\n            />\n             <input\n              type=\"text\"\n              onChange={this.handleJournal('question')}\n              placeholder=\"questionId\"\n              value={this.state.journal.data.question}\n            />\n             <input\n              type=\"text\"\n              onChange={this.handleJournal('response')}\n              placeholder=\"response\"\n              value={this.state.journal.data.response}\n            />\n             <input\n              type=\"text\"\n              onChange={this.handleJournal('roundNumber')}\n              placeholder=\"roundNumber (one, two) etc\"\n              value={this.state.journal.data.roundNumber}\n            />\n            <input\n              type=\"submit\"\n            />\n          </form>\n          <form onSubmit={this.testActionFour}>\n            <h2>Discussion</h2>\n            <input\n              type=\"text\"\n              onChange={this.handleDiscussion('playerNumber')}\n              placeholder=\"player number\"\n              value={this.state.discussion.data.playerNumber}\n            />\n            <input\n              type=\"submit\"\n            />\n          </form>\n        </div>\n        <pre>{JSON.stringify(this.state, null, 2)}</pre>\n      </div>\n    );\n  }\n}\n\nexport default connect()(AboutPage);\n","/** Game.js\n * Main component for game\n * Creates socket connection\n * Conditional rendering for different game stages\n * Sub components for different game phases\n * -->pregame\n * -->game start\n * -->game rounds\n * -->post game\n * functions for all socket emissions and three.js background live here\n * -->these functions are passed down as props to sub-components\n * imported module 'receiver' handles incoming socket events\n */\n\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\n//game component imports\nimport GameRounds from './GameRounds/GameRounds';\nimport PostGame from './PostGame/PostGame';\nimport GameStart from './GameStart/GameStart';\nimport PreGame from './PreGame/PreGame';\nimport Sidebar from './Sidebar';\nimport Chat from './Chat';\nimport ActionPanel from './ActionPanel';\n\n//game start imports\nimport axios from 'axios';\nimport io from 'socket.io-client';\nimport receiver from './modules/receiver';\nlet socket;\n\nclass Game extends Component {\n\n  createGame = config => { //function to create the game, triggers the game start on server\n    axios({\n      method: 'POST',\n      data: { id: this.props.state.user.userReducer.id, gameConfig: config }, //pass facilitator id to be added to game table + options for game settings\n      url: '/game/start',\n    })\n      .then(response => {\n        this.props.dispatch({ type: 'FETCH_GAMES' });\n      })\n      .catch(err => {\n        console.log(err);\n      })\n  }\n\n  facilitatorJoinGame = game => {\n    this.props.dispatch({ type: 'FETCH_GAME', payload: game.id }) //sets the gameId in redux state\n    socket = io.connect(`/${game.code}`); //connecting to socket namespace with code\n    socket.on('moves', data => { //set event handler for 'moves' events\n      try {\n        //pass the custom action object to receiver to be formatted into a redux action\n        let action = receiver(data);\n        //if the action includes a fetchPlayers directive\n        if (action.payload.fetchPlayers) {\n          //trigger a saga that fetches the players from the database\n          this.props.dispatch({ type: 'FETCH_PLAYERS', payload: this.props.state.game.game.id })\n        }\n        if (data.type === 'advance' && data.data.newGameState[0] !== '0' && data.data.newGameState[0] !== '6') { //if it is an advance action\n          if (data.data.newGameState[1] === '0' && data.data.newGameState[0] !== '1') {\n            this.props.moveSphereBack(Number(this.props.state.game.roundNumber - 1))\n          }\n          this.props.moveSphereForward(Number(this.props.state.game.roundNumber))\n        } else if (data.type === 'advance' && data.data.newGameState[0] === '6') {\n          this.props.moveSphereBack(Number(this.props.state.game.roundNumber - 1))\n        }\n        //dispatch the returned redux action\n        this.props.dispatch(action);\n      } catch (err) {\n        console.log('Error in moves handler', err);\n      }\n    })\n    socket.on('players', data => { //set event handler for 'players' events\n      //trigger saga to refresh players\n      this.props.dispatch({ type: 'FETCH_PLAYERS', payload: this.props.state.game.game.id })\n    })\n    socket.on('game', data => {\n      this.props.dispatch({ type: 'FETCH_GAMES' });\n    })\n    socket.on('chat', data => {\n      this.props.dispatch({ type: 'FETCH_CHAT', payload: this.props.state.game.game.id });\n    })\n    this.props.dispatch({ type: 'REJOIN_GAME_FACILITATOR', payload: game.id })\n    this.props.dispatch({ type: 'SET_CODE', payload: game.code })\n  }\n\n  endGame = async (boolean) => { //function triggers game end on server\n    //emit socket to trigger player redirects\n    if (boolean) {\n      socket.emit('end', { done: true });\n    }\n    await axios({\n      method: 'POST',\n      data: { id: this.props.state.user.userReducer.id },\n      url: '/game/end',\n    }) //will later clear all of the appropriate redux store items\n    setTimeout(() => {\n      this.props.dispatch({ type: 'CLEAR_SELECT_GAME' })\n      this.props.dispatch({ type: 'FETCH_GAMES' })\n    }, 1000)\n  }\n\n  advanceStage = (newGameState, resetDiscussion) => { //function emits an 'advance' action\n    //function is passed as props to sub-components\n    socket.emit('moves', {\n      type: 'advance',\n      data: {\n        newGameState,\n        resetDiscussion: resetDiscussion, //if a reset discussion exists it will reset all players discussed bool to false\n      },\n      facilitatorId: this.props.state.user.userReducer.id,\n    })\n  }\n\n  editJournal = response => { //function emits a 'journal' action to edit journal body\n    socket.emit('moves', {\n      type: 'journal',\n      intention: false, //boolean server uses to process editIntention function's emission\n      data: {\n        playerId: this.props.state.game.player.id,\n        question: this.props.state.game.player.current_card,\n        response: response, //user input\n        roundNumber: this.props.state.game.roundNumber,\n      }\n    })\n  }\n\n  editIntention = intention => {  //function emits a 'journal' action to edit journal intention\n    socket.emit('moves', {\n      type: 'journal',\n      intention: true, //boolean set to true for server process\n      data: {\n        playerId: this.props.state.game.player.id,\n        intention: intention, //user input\n      }\n    })\n  }\n\n  joinGame = (name, code, reJoin) => {\n    try {\n      socket = io.connect(`/${code}`); //connect to socket based on user input\n      socket.on('moves', data => { // set event handler for 'moves' events\n        try {\n          let action = receiver(data); //call the receiver module on received action\n          if (data.type === 'advance') { //if it is an advance action\n            this.props.dispatch({ //update the round number in redux state\n              type: 'UPDATE_ROUND_NUMBER',\n              payload: data.data.newGameState[0],\n            }) //game state is a string of two numbers '00', index 0 is the round number, index 1 is step number within round\n            if (data.data.newGameState[0] !== '0' && data.data.newGameState[0] !== '6') {\n              if (data.data.newGameState[1] === '0' && data.data.newGameState[0] !== '1') {\n                this.props.moveSphereBack(Number(this.props.state.game.roundNumber - 1))\n              }\n              this.props.moveSphereForward(Number(this.props.state.game.roundNumber))\n            } else if (data.data.newGameState[0] === '6') {\n              this.props.moveSphereBack(Number(this.props.state.game.roundNumber - 1))\n            }\n          }\n          if (action.payload.fetchPlayers) { //if the action directs to refresh players\n            //trigger fetch players saga\n            this.props.dispatch({ type: 'FETCH_PLAYERS', payload: this.props.state.game.game.id })\n          }\n          this.props.dispatch(action); //dispatch the redux action\n        } catch (err) {\n          console.log('Error in moves handler', err);\n        }\n      })\n      socket.on('start', data => {\n        console.log(data);\n      })\n      socket.on('join', data => { //set join event handler\n        let actions = receiver(data); //pass data to receiver\n        //receiver returns an array of two actions\n        this.props.dispatch(actions[0]); //dispatch first\n        this.props.dispatch(actions[1]); //dispatch second\n        this.props.dispatch(actions[2]); //dispatch second\n      })\n      socket.on('end', () => { //set event handler for game end\n        console.log('in end handler');\n        this.props.history.push('/results'); //redirect players at game end\n      })\n      socket.on('players', data => { //set players event handler\n        //trigger fetch players saga\n        this.props.dispatch({ type: 'FETCH_PLAYERS', payload: this.props.state.game.game.id })\n        this.props.dispatch({ type: 'FETCH_JOURNAL', payload: this.props.state.game.player.journal_id })\n      })\n      socket.on('chat', data => {\n        this.props.dispatch({ type: 'FETCH_CHAT', payload: this.props.state.game.game.id });\n      })\n      socket.on('player', data => { //set event handler for 'player' events\n        //trigger saga to refresh single player\n        this.props.dispatch({ type: 'FETCH_PLAYER', payload: this.props.state.game.player.id })\n        this.props.dispatch({ type: 'FETCH_JOURNAL', payload: this.props.state.game.player.journal_id })\n      })\n      if (!reJoin) {\n        socket.emit('join', { //emit an action to join game on server\n          type: 'join',\n          data: {\n            name,\n          },\n        })\n      }\n      else if (reJoin) {\n        this.props.dispatch({ type: 'REJOIN_GAME_PLAYER', payload: { code, name } })\n      }\n      this.props.dispatch({ //set the game code in redux state (for view redirect)\n        type: 'SET_CODE',\n        payload: code,\n      })\n    }\n    catch (err) {\n      console.log(err);\n    }\n  }\n\n  calculateNextStage = nextStage => { //function determines the appropriate game state to send to server\n    if (nextStage === '0') { //if next stage is start of a new round\n      //make the round number a number type\n      let number = Number(this.props.state.game.roundNumber);\n      //add one to the round number\n      number = number + 1\n      //make the round number a string again\n      let newRound = number.toString();\n      //update the round number in redux state\n      this.props.dispatch({\n        type: 'UPDATE_ROUND_NUMBER',\n        payload: newRound,\n      })\n      //return the proper game state to be dispatched\n      return (newRound + nextStage);\n    }\n    //else return the game state based on current redux state round number\n    return (this.props.state.game.roundNumber + nextStage);\n  }\n\n  selectPlayer = player => { //function emits action when facilitator selects a player to speak\n    socket.emit('moves', {\n      type: 'discussion',\n      data: {\n        player: player,\n        set: 'next', //for server to distinguish between select and set done actions\n      },\n      facilitatorId: this.props.state.user.userReducer.id,\n    })\n  }\n\n  markDone = player => { //function emits action to mark a player as done discussing\n    socket.emit('moves', {\n      type: 'discussion',\n      data: {\n        player: player,\n        set: 'done', //lets the server know to update the boolean value in the database\n      },\n      facilitatorId: this.props.state.user.userReducer.id,\n    })\n    this.props.dispatch({ type: 'CLEAR_SELECTED_PLAYER' }) //clears the selected player in redux state\n  }\n\n  dealCards = () => { //function emits action to deal cards to all players\n    socket.emit('moves', {\n      type: 'deal',\n      data: {\n        roundNumber: this.props.state.game.roundNumber,\n      },\n      facilitatorId: this.props.state.user.userReducer.id,\n    })\n  }\n\n  advanceToDiscussion = player => {\n    socket.emit('moves', {\n      type: 'discussion',\n      data: {\n        player: player,\n        set: 'ready',\n      }\n    })\n    this.props.dispatch({ type: 'UPDATE_GAME_STATE', payload: { newGameState: this.calculateNextStage('2') } })\n  }\n\n  componentDidMount() {\n    window.addEventListener('beforeunload', this.disconnectSocket);\n    this.props.dispatch({ type: 'FETCH_DECKS' });\n  }\n\n  disconnectSocket = async event => {\n    if (!this.props.state.user.userReducer.id) {\n      event.preventDefault();\n      await socket.emit('leave', {\n        id: this.props.state.game.player.id,\n      })\n    }\n    window.removeEventListener('beforeunload', this.disconnectSocket)\n  }\n\n  sendMessage = message => {\n    socket.emit('chat', {\n      message,\n      type: 'user',\n      from: this.props.state.game.player.name || 'Facilitator',\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"game\">\n\n        <Sidebar\n          createGame={this.createGame} //function to create a new game as facilitator\n        />\n        <ActionPanel\n          editIntention={this.editIntention} //function allows user to input their intention\n          editJournal={this.editJournal} //function for player to input their answers to provided questions\n          advanceToDiscussion={this.advanceToDiscussion}//single player can advance from answer stage to discussion phase\n          selectPlayer={this.selectPlayer} //function to select which player is going to speak next\n        />\n        {this.props.state.game.gameState[0] === '0' &&\n          this.props.state.gameCode !== '' ?\n          <GameStart\n            advanceStage={this.advanceStage} //function to advance the game forward\n            calculateNextStage={this.calculateNextStage}  //function required if advancing to a new round\n          />\n          :\n          this.props.state.game.gameState[0] === '0' ?\n            <PreGame\n              advanceStage={this.advanceStage} //function to advance the game forward\n              joinGame={this.joinGame} //function to join a game as player\n              facilitatorJoinGame={this.facilitatorJoinGame}\n              endGame={this.endGame} //function to end the game\n            />\n            :\n            null\n        }\n        {this.props.state.game.gameState[0] > 0 && this.props.state.game.gameState[0] < 6 &&\n          <GameRounds\n            advanceStage={this.advanceStage} //function to advance the game forward\n            calculateNextStage={this.calculateNextStage} //function required if advancing to a new round\n            markDone={this.markDone} //function to mark a player as done speaking\n            dealCards={this.dealCards} //function for facilitator to deal cards to all players\n          />\n        }\n        {this.props.state.game.gameState[0] == '6' &&\n          <PostGame\n            advanceStage={this.advanceStage} //function to advance the game forward\n            endGame={this.endGame} //function to end the game\n          />\n        }\n        <Chat\n          sendMessage={this.sendMessage}\n        />\n      </div>\n    )\n  }\n\n\n\n}\n\nconst mapStateToProps = state => ({\n  state\n});\n\nexport default withRouter(connect(mapStateToProps)(Game));\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nconst LogOutButton = props => (\n  <button\n    // This button shows up in multiple locations and is styled differently\n    // because it's styled differently depending on where it is used, the className\n    // is passed to it from it's parents through React props\n    className={props.className}\n    onClick={() => props.dispatch({ type: 'LOGOUT' })}\n  >\n    Log Out\n  </button>\n);\n\n// This component doesn't need 'mapStateToProps'\n// because it doesn't care what the current state is.\n// No matter what the redux state is, this button will always be a log out button\n// this component still needs 'connect' though, because it is going to dispatch a redux action\nexport default connect()(LogOutButton);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport LogOutButton from '../LogOutButton/LogOutButton';\n\nconst Nav = (props) => (\n  <div className=\"nav\">\n    <Link to=\"/home\">\n\n      <h2 className=\"nav-title\">Your Wise Moves</h2>\n\n      \n\n    </Link>\n    <div className=\"nav-right\">\n      {/* Show the link to the info page and the logout button if the user is logged in */}\n      {props.user.userReducer.id && (\n        <>\n          <Link className=\"nav-link\" to=\"/cards\">\n            Cards\n          </Link>\n          <Link className=\"nav-link\" to=\"/admin\">\n            Admin\n          </Link>\n          <LogOutButton className=\"nav-link\"/>\n        </>\n      )}\n    </div>\n  </div>\n);\n\n// Instead of taking everything from state, we just want the user\n// object to determine if they are logged in\n// if they are logged in, we show them a few more links \n// if you wanted you could write this code like this:\n// const mapStateToProps = ({ user }) => ({ user });\nconst mapStateToProps = state => ({\n  user: state.user,\n});\n\nexport default connect(mapStateToProps)(Nav);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as THREE from 'three';\n\nclass Background extends Component {\n\n    constructor(state) {\n        super(state);\n\n        this.start = this.start.bind(this);\n        this.stop = this.stop.bind(this);\n        this.animate = this.animate.bind(this);\n        this.moveSphereForward = this.moveSphereForward.bind(this);\n        this.speedArchitect = this.speedArchitect.bind(this);\n        //new\n    }\n\n    componentDidMount() {\n\n        //Counter for moveSphereForward() and moveSphereBack().  It goes up to easedArray.length, which is\n        //determined by speedArchitect(), then goes back down to zero.  This allows each spheres animation \n        //to use the same counter.  \n        let i = 0;\n        this.i = i;\n\n        //This determines which background is currently visible.  There are 6 sections in the background, neutral\n        //and the 5 movements.  After the final of round (earth), the background needs to rotate one last time \n        //so that the game can end on the neutral, blue background.  \n        let counter = 1;\n        this.counter = counter;\n\n        //This determines in moveSphereForward() and moveSphereBack() when the animation stops.\n        let backwards = false;\n        this.backwards = backwards;\n\n        //mount is a ref.  These variables allow the camera to render a proper field of view, or viewing frustum.\n        const width = this.mount.clientWidth;\n        const height = this.mount.clientHeight;\n\n        const scene = new THREE.Scene();\n        const camera = new THREE.PerspectiveCamera(\n            35,\n            width / height,\n            2,\n            1000\n        );\n        camera.position.set(0, 0, 190);\n\n        const renderer = new THREE.WebGLRenderer({ antialias: true })\n\n        renderer.setViewport(0, 0, 200, 200)\n\n        //---------------------LIGHTS-------------------------------------\n        const light1 = new THREE.PointLight(0xffffff, .4);\n        light1.position.set(-50, -15, 100)\n\n        const light2 = new THREE.PointLight(0xffffff, .4);\n        light2.position.set(50, 15, 100)\n\n        const light3 = new THREE.PointLight(0xffffff, .8);\n        light3.position.set(-10, 0, 160)\n\n        const light4 = new THREE.PointLight(0xffffff, .8);\n        light4.position.set(10, 0, 160)\n\n        const light5 = new THREE.PointLight(0xffffff, .6);\n        light5.position.set(8, 8, 140);\n        scene.add(light1, light2, light3, light4, light5)\n        //--------------------END LIGHTS-------------------------------------\n\n        //background\n        const backgroundTexture = new THREE.TextureLoader().load(require('./images/threebackground.jpg'));\n\n        const geoBackground = new THREE.PlaneBufferGeometry(800, 800, 32);\n        const matBackground = new THREE.MeshBasicMaterial({ map: backgroundTexture });\n        const background = new THREE.Mesh(geoBackground, matBackground);\n        background.receiveShadow = true;\n        background.position.z = -20;\n        background.position.y = -200;\n        background.rotation.z = -Math.PI / 6;\n        scene.add(background);\n\n        //------------------------------CLOUDS----------------------------------\n        //clouds\n        const textureClouds1 = new THREE.TextureLoader().load(require('./images/clouds1.jpg'));\n\n        const geoClouds1 = new THREE.SphereGeometry(60, 100, 100);\n        const matClouds1 = new THREE.MeshPhongMaterial({ alphaMap: textureClouds1 });\n        const clouds1 = new THREE.Mesh(geoClouds1, matClouds1);\n        matClouds1.transparent = true;\n\n        const textureClouds2 = new THREE.TextureLoader().load(require('./images/clouds2.jpg'));\n\n        const geoClouds2 = new THREE.SphereGeometry(90, 100, 100);\n        const matClouds2 = new THREE.MeshPhongMaterial({ alphaMap: textureClouds2 });\n        const clouds2 = new THREE.Mesh(geoClouds2, matClouds2);\n        matClouds2.transparent = true\n        scene.add(clouds1, clouds2);\n        //--------------------------END CLOUDS----------------------------------\n\n\n        //--------------------------SPHERES----------------------------------\n        //Each sphere uses it's loaded texture as both a map and a bumpMap.  \n        const textureYinYang = new THREE.TextureLoader().load(require('./images/yinYang.jpg'));\n\n        const geoYinYang = new THREE.SphereGeometry(10, 100, 100);\n        const matYinYang = new THREE.MeshPhongMaterial({ map: textureYinYang, bumpMap: textureYinYang });\n        const yinYang = new THREE.Mesh(geoYinYang, matYinYang);\n        yinYang.overdraw = true;\n        yinYang.castShadow = true;\n        yinYang.receiveShadow = true;\n        scene.add(yinYang);\n        yinYang.position.set(0, 0, 120);\n\n        const textureEarth = new THREE.TextureLoader().load(require('./images/earth.jpg'));\n\n        const geoEarth = new THREE.SphereGeometry(10, 100, 100);\n        const matEarth = new THREE.MeshPhongMaterial({ map: textureEarth, bumpMap: textureEarth });\n        const earth = new THREE.Mesh(geoEarth, matEarth);\n        earth.overdraw = true;\n        earth.castShadow = true;\n        scene.add(earth);\n        earth.position.set(0, -40, 0);\n\n        const textureMetal = new THREE.TextureLoader().load(require('./images/metal.jpg'));\n\n        const geoMetal = new THREE.SphereGeometry(10, 100, 100);\n        const matMetal = new THREE.MeshPhongMaterial({ map: textureMetal, bumpMap: textureMetal });\n        const metal = new THREE.Mesh(geoMetal, matMetal);\n        metal.overdraw = true;\n        metal.castShadow = true;\n        scene.add(metal);\n        metal.position.set(-38, -12, 0);\n\n        const textureWater = new THREE.TextureLoader().load(require('./images/water.jpg'));\n\n        const geoWater = new THREE.SphereGeometry(10, 100, 100);\n        const matWater = new THREE.MeshPhongMaterial({ map: textureWater, bumpMap: textureWater });\n        const water = new THREE.Mesh(geoWater, matWater);\n        water.overdraw = true;\n        water.castShadow = true;\n        scene.add(water);\n        water.position.set(-24, 32, 0)\n\n        const textureFire = new THREE.TextureLoader().load(require('./images/fire.jpg'));\n\n        const geoFire = new THREE.SphereGeometry(10, 100, 100);\n        const matFire = new THREE.MeshPhongMaterial({ map: textureFire, bumpMap: textureFire });\n        const fire = new THREE.Mesh(geoFire, matFire);\n        fire.overdraw = true;\n        fire.castShadow = true;\n        scene.add(fire);\n        fire.position.set(38, -12, 0)\n\n        const textureWood = new THREE.TextureLoader().load(require('./images/wood.jpg'));\n\n        const geoWood = new THREE.SphereGeometry(10, 100, 100);\n        const matWood = new THREE.MeshPhongMaterial({ map: textureWood, bumpMap: textureWood });\n        const wood = new THREE.Mesh(geoWood, matWood);\n\n        wood.overdraw = true;\n        wood.castShadow = true;\n        scene.add(wood);\n        wood.position.set(24, 32, 0)\n        //------------------------------END SPHERES----------------------------------\n\n        //----------------------------CURVE PATH------------------------------------\n        //These paths are what the spheres follow in moveSphereForward() and moveSphereBack()\n        //The array of points determined in createBezierCurve are the points used in speedArchitect()\n        //to create an eased movement, so of the 1256 points created in the below functions, only 250 or\n        //so of them are actually used.  \n        const createBezierCurve = (a, b, c, d) => {\n            const curve = new THREE.CubicBezierCurve3(\n                new THREE.Vector3(a.x, a.y, a.z), //starting point\n                new THREE.Vector3(b.x, b.y, b.z),//control points, both\n                new THREE.Vector3(c.x, c.y, c.z),//of these are necessary\n                new THREE.Vector3(d.x, d.y, d.z), //ending point\n            );\n            const points = curve.getPoints(1256);\n            return points\n        }\n\n        const pointsEarthOutside = createBezierCurve(\n            { x: 0, y: -40, z: 0 },\n            { x: 0, y: -30, z: 30 },\n            { x: 0, y: -30, z: 70 },\n            { x: 0, y: 0, z: 120 },\n        )\n\n        const pointsEarthInside = createBezierCurve(\n            { x: 0, y: -40, z: 0 },\n            { x: 0, y: 10, z: 30 },\n            { x: 0, y: 10, z: 70 },\n            { x: 0, y: 0, z: 120 },\n        )\n\n        const pointsFireOutside = createBezierCurve(\n            { x: 38, y: -12, z: 0 },\n            { x: 29, y: -9, z: 30 },\n            { x: 29, y: -9, z: 70 },\n            { x: 0, y: 0, z: 120 },\n        )\n\n        const pointsFireInside = createBezierCurve(\n            { x: 38, y: -12, z: 0 },\n            { x: -10, y: 3, z: 30 },\n            { x: -10, y: 3, z: 70 },\n            { x: 0, y: 0, z: 120 },\n        )\n\n        const pointsWoodOutside = createBezierCurve(\n            { x: 24, y: 32, z: 0 },\n            { x: 18, y: 24, z: 30 },\n            { x: 18, y: 24, z: 70 },\n            { x: 0, y: 0, z: 120 },\n        )\n\n        const pointsWoodInside = createBezierCurve(\n            { x: 24, y: 32, z: 0 },\n            { x: -6, y: -8, z: 30 },\n            { x: -6, y: -8, z: 70 },\n            { x: 0, y: 0, z: 120 },\n        )\n\n        const pointsWaterOutside = createBezierCurve(\n            { x: -24, y: 32, z: 0 },\n            { x: -18, y: 24, z: 30 },\n            { x: -18, y: 24, z: 70 },\n            { x: 0, y: 0, z: 120 },\n        )\n\n        const pointsWaterInside = createBezierCurve(\n            { x: -24, y: 32, z: 0 },\n            { x: 6, y: -8, z: 30 },\n            { x: 6, y: -8, z: 70 },\n            { x: 0, y: 0, z: 120 },\n        )\n\n        const pointsMetalOutside = createBezierCurve(\n            { x: -38, y: -12, z: 0 },\n            { x: -29, y: -9, z: 30 },\n            { x: -29, y: -9, z: 70 },\n            { x: 0, y: 0, z: 120 },\n        )\n\n        const pointsMetalInside = createBezierCurve(\n            { x: -38, y: -12, z: 0 },\n            { x: 10, y: 3, z: 30 },\n            { x: 10, y: 3, z: 70 },\n            { x: 0, y: 0, z: 120 },\n        )\n\n        this.pointsEarthOutside = pointsEarthOutside;\n        this.pointsEarthInside = pointsEarthInside;\n        this.pointsWoodOutside = pointsWoodOutside;\n        this.pointsWoodInside = pointsWoodInside;\n        this.pointsFireOutside = pointsFireOutside;\n        this.pointsFireInside = pointsFireInside;\n        this.pointsWaterOutside = pointsWaterOutside;\n        this.pointsWaterInside = pointsWaterInside;\n        this.pointsMetalOutside = pointsMetalOutside;\n        this.pointsMetalInside = pointsMetalInside;\n\n        //---------------------END CURVE PATH------------------------------------\n\n\n        renderer.setClearColor('#112233');\n        renderer.setSize(width, height);\n\n        this.scene = scene;\n        this.camera = camera;\n        this.renderer = renderer;\n\n        this.background = background;\n\n        this.clouds1 = clouds1;\n        this.clouds2 = clouds2;\n\n        this.yinYang = yinYang;\n        this.earth = earth;\n        this.fire = fire;\n        this.metal = metal;\n        this.water = water;\n        this.wood = wood;\n\n        this.mount.appendChild(this.renderer.domElement)\n        this.start()\n        // this.moveSphereForward(1)\n    }\n\n    componentWillUnmount() {\n        this.stop()\n        this.mount.removeChild(this.renderer.domElement)\n    }\n\n    start() {\n        if (!this.frameId) {\n            this.frameId = requestAnimationFrame(this.animate)\n            console.log('frame id is:', this.frameId);\n        }\n    }\n\n    //This is to ensure that the animation will terminate on componentWillUnmount()\n    stop() {\n        cancelAnimationFrame(this.frameId)\n    }\n\n\n    //Balls slowly spinning around y axis, camera rotating on z axis, and clouds \n    //slowly rotating.  \n    animate() {\n        this.renderScene()\n        this.frameId = window.requestAnimationFrame(this.animate)\n        this.camera.rotation.z -= .0004;\n        this.clouds1.rotation.y += .001;\n        this.clouds2.rotation.y += .001;\n\n        this.yinYang.rotation.y += 0.00;\n        this.earth.rotation.y += 0.001;\n        this.fire.rotation.y += 0.001;\n        this.metal.rotation.y += 0.001;\n        this.water.rotation.y += 0.001;\n        this.wood.rotation.y += 0.001;\n    }\n\n    //This function takes in the array of points created above in createBezierCurve and\n    //returns an array of eased points, making the movement of the spheres to front or back\n    //start slowly, speed up, then slow back down before coming to a halt in it's new position.\n    speedArchitect = (max, subSteps) => {\n        let blueprint = [];\n        const speeds = [.01, .02, .04, .07, .12, .15, .18, .15, .12, .07, .04, .02, .01];\n        let subSpeeds = speeds.map(speed => speed / subSteps);\n        let currentPoint = 0;\n        blueprint.push(currentPoint);\n        for (let speed of subSpeeds) {\n            for (let i = 0; i < subSteps; i++) {\n                currentPoint = currentPoint + max * speed;\n                blueprint.push(parseInt(currentPoint));\n            }\n        }\n        return blueprint;\n    }\n\n    //rotates background 1/6th of it's circumference to reflect current round\n    rotateBackground = (numOfSegments) => {\n        this.background.rotation.z += (Math.PI / 3) / numOfSegments;\n    }\n\n    moveSphereForward = (input) => {\n        //these are defined here instead of inputting actual points arrays because this function \n        //is called from a seperate component, so the path needs to be determined here.  \n        let pointsArrayOutside;\n        let pointsArrayInside;\n        let sphere;\n        //determines which sphere and paths to use\n        if (input === 1){\n            pointsArrayOutside = this.pointsMetalOutside;\n            pointsArrayInside = this.pointsMetalInside;\n            sphere = this.metal\n        } else if ( input === 2){\n            pointsArrayOutside = this.pointsWaterOutside;\n            pointsArrayInside = this.pointsWaterInside;\n            sphere = this.water\n        } else if ( input === 3){\n            pointsArrayOutside = this.pointsWoodOutside;\n            pointsArrayInside = this.pointsWoodInside;\n            sphere = this.wood\n        } else if ( input === 4){\n            pointsArrayOutside = this.pointsFireOutside;\n            pointsArrayInside = this.pointsFireInside;\n            sphere = this.fire\n        } else if ( input === 5){\n            pointsArrayOutside = this.pointsEarthOutside;\n            pointsArrayInside = this.pointsEarthInside;\n            sphere = this.earth\n        }\n        //created eased movemtent to make animation look more natural\n        const easedArray = this.speedArchitect(pointsArrayOutside.length, 16)\n        \n        //\n        if (this.i < easedArray.length - 1 && this.backwards === false) {\n            let aPoint = easedArray[this.i];\n            let a = pointsArrayOutside[aPoint];\n            let bPoint = easedArray[easedArray.length - (this.i + 1)];\n            let b = pointsArrayInside[bPoint];\n            sphere.position.x = a.x\n            sphere.position.y = a.y\n            sphere.position.z = a.z\n            this.yinYang.position.x = b.x;\n            this.yinYang.position.y = b.y;\n            this.yinYang.position.z = b.z;\n            //calling background rotation this way makes sure that background starts and ends\n            //at same time as sphere animation.\n            this.rotateBackground(easedArray.length);\n            //increment this.i for next animation frame\n            this.i = this.i + 1;\n            requestAnimationFrame(() => this.moveSphereForward(input));\n        } else if (this.i === easedArray.length - 1 && this.backwards === false) {\n            //places sphere in it's final position, and sets this.backwards to true \n            //for moveSphereBack()\n            this.backwards = true;\n            sphere.position.x = pointsArrayOutside[pointsArrayOutside.length - 1].x;\n            sphere.position.y = pointsArrayOutside[pointsArrayOutside.length - 1].y;\n            sphere.position.z = pointsArrayOutside[pointsArrayOutside.length - 1].z;\n            this.yinYang.position.x = pointsArrayInside[0].x;\n            this.yinYang.position.y = pointsArrayInside[0].y;\n            this.yinYang.position.z = pointsArrayInside[0].z;\n            this.i--;\n        }\n    }\n\n    moveSphereBack = (input) => {\n        //these are defined here instead of inputting actual points arrays because this function \n        //is called from a seperate component, so the path needs to be determined here.  \n        let pointsArrayOutside;\n        let pointsArrayInside;\n        let sphere;\n\n        if (input === 1){\n            pointsArrayOutside = this.pointsMetalOutside;\n            pointsArrayInside = this.pointsMetalInside;\n            sphere = this.metal\n        } else if ( input === 2){\n            pointsArrayOutside = this.pointsWaterOutside;\n            pointsArrayInside = this.pointsWaterInside;\n            sphere = this.water\n        } else if ( input === 3){\n            pointsArrayOutside = this.pointsWoodOutside;\n            pointsArrayInside = this.pointsWoodInside;\n            sphere = this.wood\n        } else if ( input === 4){\n            pointsArrayOutside = this.pointsFireOutside;\n            pointsArrayInside = this.pointsFireInside;\n            sphere = this.fire\n        } else if ( input === 5){\n            pointsArrayOutside = this.pointsEarthOutside;\n            pointsArrayInside = this.pointsEarthInside;\n            sphere = this.earth\n        }\n\n        const easedArray = this.speedArchitect(pointsArrayOutside.length, 16)\n\n        if (this.i > 0 && this.backwards === true) {\n            const aPoint = easedArray[this.i];\n            const a = pointsArrayInside[aPoint];\n            const bPoint = easedArray[easedArray.length - (this.i + 1)];\n            const b = pointsArrayOutside[bPoint];\n            sphere.position.x = a.x;\n            sphere.position.y = a.y;\n            sphere.position.z = a.z;\n            this.yinYang.position.x = b.x;\n            this.yinYang.position.y = b.y;\n            this.yinYang.position.z = b.z;\n            this.i--;\n            requestAnimationFrame(() => this.moveSphereBack(input));\n        } else if (this.backwards === true && this.i === 0) {\n            this.backwards = false;\n            this.counter = this.counter + 1;\n        }\n        if ( input === 5) {\n            this.rotateBackground(easedArray.length);\n        }\n    }\n\n\n\n    renderScene() {\n        this.renderer.render(this.scene, this.camera)\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <div ref={(mount) => { this.mount = mount }} className=\"myCanvas\"></div>\n                {React.cloneElement(this.props.children, { moveSphereForward: this.moveSphereForward, moveSphereBack: this.moveSphereBack })}\n            </React.Fragment>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    state,\n});\n\nexport default connect(mapStateToProps)(Background);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\nclass LoginPage extends Component {\n  state = {\n    username: '',\n    password: '',\n  };\n\n  login = (event) => {\n    event.preventDefault();\n\n    if (this.state.username && this.state.password) {\n      this.props.dispatch({\n        type: 'LOGIN',\n        payload: {\n          username: this.state.username,\n          password: this.state.password,\n        },\n      });\n    } else {\n      this.props.dispatch({ type: 'LOGIN_INPUT_ERROR' });\n    }\n  } // end login\n\n  handleInputChangeFor = propertyName => (event) => {\n    this.setState({\n      [propertyName]: event.target.value,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        {this.props.errors.loginMessage && (\n          <h2\n            className=\"alert\"\n            role=\"alert\"\n          >\n            {this.props.errors.loginMessage}\n          </h2>\n        )}\n        <form onSubmit={this.login}>\n          <h1>Login</h1>\n          <div>\n            <label htmlFor=\"username\">\n              Username:\n              <input\n                type=\"text\"\n                name=\"username\"\n                value={this.state.username}\n                onChange={this.handleInputChangeFor('username')}\n              />\n            </label>\n          </div>\n          <div>\n            <label htmlFor=\"password\">\n              Password:\n              <input\n                type=\"password\"\n                name=\"password\"\n                value={this.state.password}\n                onChange={this.handleInputChangeFor('password')}\n              />\n            </label>\n          </div>\n          <div>\n            <input\n              className=\"log-in\"\n              type=\"submit\"\n              name=\"submit\"\n              value=\"Log In\"\n            />\n          </div>\n        </form>\n        <center>\n          <button\n            type=\"button\"\n            className=\"link-button\"\n            onClick={() => {this.props.dispatch({type: 'SET_TO_REGISTER_MODE'})}}\n          >\n            Register\n          </button>\n          <br></br>\n          <Link to=\"/game\">To Game</Link>\n        </center>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = state => ({\n  errors: state.errors,\n});\n\nexport default connect(mapStateToProps)(LoginPage);\n","import React from \"react\";\n\nconst Select = props => {\n  return (\n    <div className=\"form-group\">\n      <label for={props.name}> {props.title} </label>\n      <select\n        id={props.name}\n        name={props.name}\n        value={props.value}\n        onChange={props.handleChange}\n        className=\"form-control\"\n      >\n        <option value=\"\" disabled>\n          {props.placeholder}\n        </option>\n        {props.options.map(option => {\n          return (\n            <option key={option.value} value={option.value} label={option.label}>\n              {option.label}\n            </option>\n          );\n        })}\n      </select>\n    </div>\n  );\n};\n\nexport default Select;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\n// import Input from '../InfoPage/Input';\nimport Select from \"../InfoPage/Select\";\n// import Button from \"../InfoPage/Button\";\n\n\n\nclass RegisterPage extends Component {\n  state = {\n    username: '',\n    password: '',\n    first_name: '',\n    last_name: '',\n    email: '',\n    organization: '',\n    phone_number: '',\n    is_facilitator: '', \n    is_admin: '',\n\n\n    is_facilitator_options: [\n      { value: false, label: 'False' },\n      { value: true, label: 'True' },\n    ],\n    is_admin_options: [\n      { value: false, label: 'False' },\n      { value: true, label: 'True' },\n    ]\n  };\n\n  registerUser = (event) => {\n    event.preventDefault();\n\n    if (this.state.username && this.state.password) {\n      this.props.dispatch({\n        type: 'REGISTER',\n        payload: {\n          username: this.state.username,\n          password: this.state.password,\n          first_name: this.state.first_name,\n          last_name: this.state.last_name,\n          email: this.state.email,\n          organization: this.state.organization,\n          phone_number: this.state.phone_number,\n          is_facilitator: this.state.is_facilitator,\n          is_admin: this.state.is_admin,\n        },\n      });\n    } else {\n      this.props.dispatch({ type: 'REGISTRATION_INPUT_ERROR' });\n    }\n  } // end registerUser\n\n  handleInputChangeFor = propertyName => (event) => {\n    this.setState({\n      [propertyName]: event.target.value,\n    });\n  }\n\n\n  render() {\n    return (\n      <div>\n        {this.props.errors.registrationMessage && (\n          <h2\n            className=\"alert\"\n            role=\"alert\"\n          >\n            {this.props.errors.registrationMessage}\n          </h2>\n        )}\n        <form onSubmit={this.registerUser}>\n          <h1>Register User</h1>\n          <div>\n            <label htmlFor=\"username\">\n              Username:\n              <input\n                type=\"text\"\n                name=\"username\"\n                value={this.state.username}\n                onChange={this.handleInputChangeFor('username')}\n              />\n            </label>\n          </div>\n          <div>\n            <label htmlFor=\"password\">\n              Password:\n              <input\n                type=\"password\"\n                name=\"password\"\n                value={this.state.password}\n                onChange={this.handleInputChangeFor('password')}\n              />\n            </label>\n          </div>\n\n          <div>\n            <label htmlFor=\"first_name\">\n              First Name:\n            <input\n                type=\"text\"\n                name=\"first_name\"\n                value={this.state.first_name}\n                onChange={this.handleInputChangeFor('first_name')}\n              />\n            </label>\n          </div>\n\n          <div>\n            <label htmlFor=\"last_name\">\n              Last Name:\n            <input\n                type=\"text\"\n                name=\"last_name\"\n                value={this.state.last_name}\n                onChange={this.handleInputChangeFor('last_name')}\n              />\n            </label>\n          </div>\n\n          <div>\n            <label htmlFor=\"email\">\n              Email:\n            <input\n                type=\"text\"\n                name=\"email\"\n                value={this.state.email}\n                onChange={this.handleInputChangeFor('email')}\n              />\n            </label>\n          </div>\n\n          <div>\n            <label htmlFor=\"organization\">\n              Organization:\n            <input\n                type=\"text\"\n                name=\"organization\"\n                value={this.state.organization}\n                onChange={this.handleInputChangeFor('organization')}\n              />\n            </label>\n          </div>\n\n          <div>\n            <label htmlFor=\"phone_number\">\n              Phone Number:\n            <input\n                type=\"number\"\n                name=\"phone_number\"\n                value={this.state.phone_number}\n                onChange={this.handleInputChangeFor('phone_number')}\n              />\n            </label>\n\n          </div>\n\n          <div>\n\n            <label htmlFor=\"is_facilitator\">\n            <Select\n                title={\"Facilitator\"}\n                name={\"is_facilitator\"}\n                options={this.state.is_facilitator_options}\n                value={this.state.is_facilitator}\n                placeholder={\"True or False\"}\n                handleChange={this.handleInputChangeFor('is_facilitator')}\n              />\n            </label>\n\n          </div>\n\n          <div>\n\n            <label htmlFor=\"is_admin\">\n            <Select\n                title={\"Administrator\"}\n                name={\"is_admin\"}\n                options={this.state.is_admin_options}\n                value={this.state.is_admin}\n                placeholder={\"True or False\"}\n                handleChange={this.handleInputChangeFor('is_admin')}\n              />\n             \n            </label>\n\n          </div>\n\n          <div>\n            <input\n              className=\"register\"\n              type=\"submit\"\n              name=\"submit\"\n              value=\"Register\"\n            />\n          </div>\n        </form>\n        {/* <center> */}\n        <button\n          type=\"button\"\n          // className=\"link-button\"\n          onClick={() => { this.props.dispatch({ type: 'SET_TO_LOGIN_MODE' }) }}\n        >\n          Login\n          </button>\n        {/* </center> */}\n      </div >\n    );\n  }\n}\n\n// Instead of taking everything from state, we just want the error messages.\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({errors}) => ({errors});\nconst mapStateToProps = state => ({\n  errors: state.errors,\n});\n\nexport default connect(mapStateToProps)(RegisterPage);\n\n","import React from 'react';\nimport {Route} from 'react-router-dom'\nimport {connect} from 'react-redux';\nimport LoginPage from '../LoginPage/LoginPage';\nimport RegisterPage from '../RegisterPage/RegisterPage';\n\n// A Custom Wrapper Component -- This will keep our code DRY.\n// Responsible for watching redux state, and returning an appropriate component\n// API for this component is the same as a regular route\n\n// THIS IS NOT SECURITY! That must be done on the server\n// A malicious user could change the code and see any view\n// so your server-side route must implement real security\n// by checking req.isAuthenticated for authentication\n// and by checking req.user for authorization\n\nconst ProtectedRoute = (props) => {\n  // Using destructuring, this takes ComponentToProtect from component\n  // prop and grabs all other props to pass them along to Route\n  const {\n    // Alias prop 'component' as 'ComponentToProtect'\n    component: ComponentToProtect,\n    user,\n    loginMode,\n    ...otherProps\n  } = props;\n\n  let ComponentToShow;\n\n  if(user.id) {\n    // if the user is logged in (only logged in users have ids)\n    // show the component that is protected\n    ComponentToShow = ComponentToProtect;\n  } else if (loginMode === 'login') {\n    // if they are not logged in, check the loginMode on Redux State\n    // if the mode is 'login', show the LoginPage\n    ComponentToShow = LoginPage;\n  } else {\n    // the the user is not logged in and the mode is not 'login'\n    // show the RegisterPage\n    ComponentToShow = RegisterPage;\n  }\n\n  // We return a Route component that gets added to our list of routes\n  return (\n      <Route\n        // all props like 'exact' and 'path' that were passed in\n        // are now passed along to the 'Route' Component\n        {...otherProps}\n        component={ComponentToShow}\n      />\n  )\n}\n\n// Instead of taking everything from state, we just want the user and loginMode\n// to determine which page we should show the user\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({ user, loginMode }) => ({ user, loginMode });\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user,\n    loginMode: state.loginMode,\n  }\n}\n\nexport default connect(mapStateToProps)(ProtectedRoute)\n\n\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport LogOutButton from '../LogOutButton/LogOutButton';\n\n// this could also be written with destructuring parameters as:\n// const UserPage = ({ user }) => (\n// and then instead of `props.user.username` you could use `user.username`\nconst UserPage = (props) => (\n  <div>\n    <h1 id=\"welcome\">\n      Welcome, { props.user.username }!\n    </h1>\n    <p>Your ID is: {props.user.id}</p>\n    <LogOutButton className=\"log-in\" />\n  </div>\n);\n\n// Instead of taking everything from state, we just want the user info.\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({user}) => ({ user });\nconst mapStateToProps = state => ({\n  user: state.user,\n});\n\n// this allows us to use <App /> in index.js\nexport default connect(mapStateToProps)(UserPage);\n","import React, { Component } from \"react\";\nimport { connect } from 'react-redux'\nimport swal from 'sweetalert';\n\nclass QuestionForm extends Component {\n  state = {\n    newContent: {\n      stage_id: '1',\n      text: ''\n    },\n    editing: false\n  }\n  componentDidMount = () => {\n    if (this.props.question) {\n      this.setState({\n        newContent: {\n          stage_id: this.props.question.stage_id,\n          text: this.props.question.text,\n          id: this.props.question.id\n        },\n        editing: true\n      })\n    }\n  }\n  handleChangeFor = (input) => event => {\n    this.setState({\n      newContent: {\n        ...this.state.newContent,\n        [input]: event.target.value,\n      }\n    })\n  }\n  handleDelete = (id) => {\n    swal({\n      title: 'Are you sure?',\n      text: 'You will not be able to recover this card.',\n      icon: 'warning',\n      buttons: true,\n      dangerMode: true,\n    }).then((willDelete) => {\n      if (willDelete) {\n        this.props.dispatch({ type: 'DELETE_CARD', payload: id });\n        swal('Your card has been deleted.', {\n          icon: 'success',\n        });\n      } else {\n        swal('Your card is safe!');\n      }\n    })\n  }\n  handleSubmit = (event) => {\n    event.preventDefault();\n    if (this.props.add) {\n      this.props.dispatch({ type: 'ADD_CARD', payload: ({ ...this.state.newContent, decksToAddTo: [] }) })\n      this.setState({\n        newContent: {\n          stage_id: '1',\n          text: ''\n        }\n      })\n    } else {\n      this.props.dispatch({ type: 'EDIT_CARD', payload: this.state.newContent })\n    }\n    swal(this.props.add ? 'Card Added' : 'Card Edited');\n\n    if (this.props.flipCard) {\n      this.props.flipCard();\n    }\n  }\n  render() {\n    return (\n      <div className=\"question-form\">\n        <form onSubmit={this.handleSubmit}>\n          <label htmlFor=\"select\">Select a movement: </label>\n          <select name=\"select\" onChange={this.handleChangeFor('stage_id')} value={this.state.newContent.stage_id}>\n            <option value=\"1\">Map</option>\n            <option value=\"2\">Open</option>\n            <option value=\"3\">Visualize</option>\n            <option value=\"4\">Engage</option>\n            <option value=\"5\">Sustain</option>\n          </select>\n          <br />\n          <label htmlFor=\"text\">Type a question: </label>\n          <br />\n          <textarea style={this.props.add?{width:'50%', marginLeft:'0', resize:'none'}:{width:'100%', height:'60px', marginLeft:'0', resize:'none'}} name=\"text\" onChange={this.handleChangeFor('text')} value={this.state.newContent.text} />\n        </form>\n        <button onClick={this.handleSubmit}>Submit</button>\n        {this.state.editing ? <button onClick={() => this.handleDelete(this.props.question.id)}>Delete</button> : null}\n      </div>\n    );\n  }\n}\n\nexport default connect()(QuestionForm);","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport QuestionForm from '../InfoPage/QuestionForm'\n\nclass Card extends Component {\n  state = {\n    newContent: {\n      stage_id: '',\n      text: ''\n    },\n    isFlipped: false\n  }\n\n  flipCard = () => this.setState({\n    isFlipped: !this.state.isFlipped,\n  });\n  classNameSwitch = (prop) => {\n    switch (prop) {\n      case '1':\n        return 'Map'\n      case '2':\n        return 'Open'\n      case '3':\n        return 'Visualize'\n      case '4':\n        return 'Engage'\n      case '5':\n        return 'Sustain'\n      default:\n        return prop\n    }\n  }\n  componentDidMount() {\n    this.setState({\n      isFlipped: this.props.flipped,\n      newContent: {\n        stage_id: this.props.question.stage_id,\n        text: this.props.question.text,\n        id: this.props.question.id\n      }\n    })\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.flipped !== prevProps.flipped) {\n      this.flipCard()\n    }\n  }\n\n  render() {\n    return (\n      !this.props.question ? null :\n        <div className={`scene ${!this.props.editable ? 'in-game' : null}`} onClick={!this.props.editable ? this.flipCard : null}>\n          <div className={`card-wrapper ${this.state.isFlipped ? 'is-flipped' : null}`}>\n            <div onClick={() => this.flipCard()} className={`card-content card-front ${this.classNameSwitch(String(this.props.question.stage_id))}`}>\n              <div className={`card-header`}>\n                <h6>{this.props.editable ? this.props.question.type : 'Your Intention ' + this.props.question.intention}</h6>\n              </div>\n              <div>\n                <h5>{this.props.question.text}</h5>\n              </div>\n            </div>\n            <div className={`card-content card-back ${this.classNameSwitch(String(this.props.question.stage_id))}`}>\n              {\n                this.props.editable ?\n                  <div>\n                    <QuestionForm\n                      flipCard={this.flipCard}\n                      question={this.props.question} />\n                    <button onClick={() => this.flipCard()}>\n                      Cancel Edit\n                </button>\n                  </div> : null\n              }\n\n            </div>\n          </div >\n        </div>\n    )\n  }\n}\n\nexport default connect()(Card)","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport Card from '../Card/Card'\nimport QuestionForm from './QuestionForm';\nclass CardPage extends Component {\n  state = {\n    allCardsWithCheckBoxes: [],\n    deckToAdd: {\n      description: '',\n      viewing: 'false',\n      cards: [],\n    },\n    cards: [],\n    decks: [],\n    filter: {\n      categorySelected: '0',\n      deckSelected: '0',\n      searchText: '',\n    }\n\n  }\n  componentDidMount() {\n    this.props.dispatch({ type: 'FETCH_CARDS' });\n    this.props.dispatch({ type: 'FETCH_DECKS' });\n  }\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.cards.cards !== prevProps.cards.cards) {\n      this.setState({\n        ...this.state,\n        cards: this.props.cards.cards,\n        allCardsWithCheckBoxes: this.props.cards.cards.map(card => ({ ...card, checked: false }))\n      })\n      this.combinedFilter(this.state.filter)\n    }\n    if (this.props.decks.decks !== prevProps.decks.decks) {\n      this.setState({\n        ...this.state,\n        decks: this.props.decks.decks,\n        allCardsWithCheckBoxes: this.props.cards.cards.map(card => ({ ...card, checked: false }))\n      })\n      this.combinedFilter(this.state.filter)\n    }\n    if (this.state.filter !== prevState.filter) {\n      this.combinedFilter(this.state.filter)\n    }\n    if (this.state.allCardsWithCheckBoxes !== prevState.allCardsWithCheckBoxes) {\n      this.setState({\n        deckToAdd: {\n          ...this.state.deckToAdd,\n          cards: this.state.allCardsWithCheckBoxes.filter(card => card.checked === true)\n        }\n      })\n    }\n    if (this.state.deckToAdd.cards.length === 0 && prevState.deckToAdd.cards.length === 1) {\n      this.setState({\n        deckToAdd: {\n          ...this.state.deckToAdd,\n          description: '',\n          viewing: 'false'\n        }\n      })\n    }\n    if (this.state.deckToAdd.viewing === 'false' && prevState.deckToAdd.viewing === 'true') {\n      this.setState({\n        filter: {\n          categorySelected: '0',\n          deckSelected: '0',\n          searchText: '',\n        }\n      })\n    }\n  }\n  dispatchDeckToPost = () => {\n    this.props.dispatch({\n      type: 'ADD_DECK', payload: {\n        description: this.state.deckToAdd.description,\n        cards_in_deck: this.state.deckToAdd.cards.map(card => card.id)\n      }\n    })\n    this.setState({\n      deckToAdd: {\n        ...this.state.deckToAdd,\n        description: '',\n        viewing: 'false'\n      }\n    })\n  }\n  filterByText = (searchText, updatedCards) => {\n    return updatedCards.filter(\n      (card => {\n        return card.text.toLowerCase().search(searchText.toLowerCase()) !== -1;\n      })\n    );\n  }\n  filterByCategory = (categoryId, updatedCards) => {\n    let numCategory = Number(categoryId)\n    if (categoryId === '0') {\n      return updatedCards\n    } else {\n      return updatedCards.filter(card => card.stage_id === numCategory)\n    }\n  }\n  filterByDeck = (deckId, updatedCards) => {\n    let numDeck = Number(deckId)\n    if (deckId === '0') {\n      return updatedCards\n    } else {\n      return updatedCards.filter(card =>\n        this.state.decks.filter(deck => deck.id === numDeck)[0].cards_in_deck.indexOf(card.id) !== -1);\n    }\n  }\n  combinedFilter = (filter) => {\n    this.setState({\n      cards: this.filterByText(filter.searchText, this.filterByCategory(filter.categorySelected, this.filterByDeck(filter.deckSelected, this.props.cards.cards)))\n    })\n  }\n  handleChangeFor = (input, subState) => (event) => {\n    this.setState({\n      [subState]: {\n        ...this.state[subState],\n        [input]: event.target.value,\n      }\n    })\n  }\n\n  handleChangeForDeckCheckbox = (id) => (event) => {\n    let copy = [...this.state.allCardsWithCheckBoxes];\n    let copyIndex = copy.findIndex(card => card.id === id)\n    let item = { ...copy[copyIndex] };\n    item.checked = event.target.checked;\n    copy[copyIndex] = item;\n    this.setState({ allCardsWithCheckBoxes: copy });\n  }\n  render() {\n    return (\n      <div>\n        <div className=\"card-input-boxes\">\n          <div className=\"add-question\">\n            <h2>Add a new question here:</h2>\n            <div>\n              <QuestionForm add={true} />\n            </div>\n          </div>\n          <div className=\"card-filter-options\">\n          <h2>Filter Options:</h2>\n            {this.state.deckToAdd.viewing === 'true' ? null :\n              <div>\n                <label htmlFor=\"select\">Filter By Category: </label>\n                <select name=\"select\"\n                  onChange={this.handleChangeFor('categorySelected', 'filter')}\n                  value={this.state.filter.categorySelected}>\n                  <option value=\"0\">All Categories</option>\n                  <option value=\"1\">Map</option>\n                  <option value=\"2\">Open</option>\n                  <option value=\"3\">Visualize</option>\n                  <option value=\"4\">Engage</option>\n                  <option value=\"5\">Sustain</option>\n                </select>\n                <label htmlFor=\"select\">Filter By Deck: </label>\n                <select name=\"select\"\n                  onChange={this.handleChangeFor('deckSelected', 'filter')}\n                  value={this.state.deckSelected}>\n                  <option value=\"0\">All Cards</option>\n                  {this.props.decks.decks.map(deck =>\n                    <option key={deck.id} value={`${deck.id}`}>{deck.description}</option>)}\n                </select>\n                <input placeholder=\"search for a card by content\" onChange={this.handleChangeFor('searchText', 'filter')}></input>\n              </div>}\n            <br />\n            {this.state.deckToAdd.cards.length === 0 ? null :\n              <>\n                <label htmlFor=\"cardsToAdd\">\n                  <input style={{ width: '20px' }} name=\"cardsToAdd\" type=\"radio\" value=\"true\" checked={this.state.deckToAdd.viewing === 'true'} onChange={this.handleChangeFor('viewing', 'deckToAdd')} />\n                  see cards in deck to be added\n              </label>\n                <br />\n                <label htmlFor=\"allCards\">\n                  <input style={{ width: '20px' }} name=\"allCards\" type=\"radio\" value=\"false\" checked={this.state.deckToAdd.viewing === 'false'} onChange={this.handleChangeFor('viewing', 'deckToAdd')} />\n                  see all cards\n              </label>\n                <br />\n                {this.state.deckToAdd.viewing === 'true' ?\n                  <>\n                    <input type=\"text\" placeholder=\"Name the new deck here\" onChange={this.handleChangeFor('description', 'deckToAdd')} />\n                    <button onClick={this.dispatchDeckToPost}>Add checked cards to deck</button>\n                  </>\n                  : null}\n              </>\n            }\n          </div>\n        </div>\n        <div className=\"card-collection\">\n          {this.state.deckToAdd.viewing === 'false' ?\n            this.state.cards.map((question) =>\n              <div key={question.id} style={{ margin: '4px' }}>\n                {this.state.allCardsWithCheckBoxes === [] ? null :\n                  <label htmlFor=\"addbox\"><input name=\"add-box\" type=\"checkbox\" className=\"card-checkbox\" onChange={this.handleChangeForDeckCheckbox(question.id)}\n                    checked={this.state.allCardsWithCheckBoxes[this.state.allCardsWithCheckBoxes.findIndex(card => card.id === question.id)].checked} />Check to add to a new deck</label>}\n                <br />\n                <Card\n                  question={question}\n                  editable={true} />\n              </div>) :\n            this.state.deckToAdd.cards.map((question) =>\n              <div key={question.id} style={{ margin: '4px' }}>\n                {this.state.allCardsWithCheckBoxes === [] ? null :\n                  <label htmlFor=\"addbox\"><input name=\"add-box\" type=\"checkbox\" className=\"card-checkbox\" onChange={this.handleChangeForDeckCheckbox(question.id)}\n                    checked={this.state.allCardsWithCheckBoxes[this.state.allCardsWithCheckBoxes.findIndex(card => card.id === question.id)].checked} />Check to remove</label>}\n                <br />\n                <Card\n                  question={question}\n                  editable={true} />\n              </div>)\n          }\n        </div>\n      </div>\n    )\n  }\n}\nconst mapReduxStateToProps = ({ cards, decks }) => ({ cards, decks })\nexport default connect(mapReduxStateToProps)(CardPage);\n","import React from \"react\";\n\nconst Button = props => {\n\n  return (\n    <button\n      style={props.style}\n      className={\n        props.type == \"primary\" ? \"btn btn-primary\" : \"btn btn-secondary\"\n      }\n      onClick={props.action}\n    >\n      {props.title}\n    </button>\n  );\n};\n\nexport default Button;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\n\n/* Import Components */\n\nimport Input from \"../InfoPage/Input\";\nimport Select from \"../InfoPage/Select\";\nimport Button from \"../InfoPage/Button\";\nimport swal from 'sweetalert';\n\n\nclass FacilitatorForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { value: 'false' };\n\n        this.state = {\n            newFacilitator: {\n                username: '',\n                password: '',\n                first_name: '',\n                last_name: '',\n                email: '',\n                organization: '',\n                phone_number: '',\n                is_facilitator: '',\n                is_admin: '',\n            },\n\n            is_facilitator_options: [\n                { value: true, label: 'True' },\n                { value: false, label: 'False' }\n            ],\n\n            is_admin_options: [\n                { value: true, label: 'True' },\n                { value: false, label: 'False' }\n            ],\n\n        };\n\n        if (props.action === 'edit') {\n            this.state.newFacilitator = props.facilitator  // this will pre-populate the newMember in the state with the data that we pass in through the member prop\n        }       // the member prop is on the AdminPage\n\n        this.handleUpdate = this.handleUpdate.bind(this);\n        this.handleDeleteFacilitator = this.handleDeleteFacilitator.bind(this);\n        this.handleFormSubmit = this.handleFormSubmit.bind(this);\n        this.handleClearForm = this.handleClearForm.bind(this);\n        this.handleInput = this.handleInput.bind(this);\n    }\n\n    /* This lifecycle hook gets executed when the component mounts */\n\n    handleInput(e) {\n        let value = e.target.value;\n        let name = e.target.name;\n        this.setState(\n            prevState => ({\n                newFacilitator: {\n                    ...prevState.newFacilitator,\n                    [name]: value\n                }\n            }),\n            () => console.log(this.state.newFacilitator)\n        );\n    }\n\n    handleTextArea(e) {\n        console.log(\"Inside handleTextArea\");\n        let value = e.target.value;\n        this.setState(\n            prevState => ({\n                newFacilitator: {\n                    ...prevState.newFacilitator,\n                    about: value\n                }\n            }),\n            () => console.log(this.state.newFacilitator)\n        );\n    }\n\n    handleFormSubmit(e) {\n        e.preventDefault();\n        console.log(this.state.newFacilitator);\n        axios.post('/api/user/register', { ...this.state.newFacilitator }) // newFacilitator includes all the db fields\n            .then((response) => {\n                console.log('this is the response for add facilitator', response.status);\n                if (response.status === 201) {\n                    this.handleClearForm()\n                    swal(\"Good job!\", \"Your facilitator was added to the database!\", \"success\");\n                }\n            }).catch((error) => {\n                console.log('error making get', error);\n            });\n\n    }\n\n    handleClearForm() {\n        this.setState({\n            newFacilitator: {\n                username: '',\n                password: '',\n                first_name: '',\n                last_name: '',\n                email: '',\n                organization: '',\n                phone_number: '',\n                is_facilitator: '',\n                is_admin: '',\n            }\n        });\n    }\n\n    // DON'T WANT TO ACTUALLY DELETE FACILITATOR -- JUST WOULD CHANGE is_facilitator TO FALSE\n    handleDeleteFacilitator(e) {\n        let fName = this.state.newFacilitator.first_name\n        let lName = this.state.newFacilitator.last_name\n        swal({\n            title: \"Are you sure?\",\n            text: \"You will not be able to recover this file!\",\n            icon: \"warning\",\n            buttons: true,\n            dangerMode: true,\n        })\n            .then((willDelete) => {\n                if (willDelete) {\n                    axios.delete('/api/user/register', { data: { first_name: fName, last_name: lName } })//in axios delete, in order to send a body, need to include body as the value of the data key\n                        .then((response) => {\n                            if (response.status === 200) {\n\n                                swal(\"Your file has been deleted!\", {\n                                    icon: \"success\",\n                                });\n                            }\n                            console.log('this is the response for the facilitator info', response);\n                        }).catch((error) => {\n                            console.log('error deleting facilitator', error);\n                        });\n\n                } else {\n                    swal(\"Your file is safe!\");\n                }\n            });\n        e.preventDefault();\n    }\n\n    handleUpdate(e) {\n        e.preventDefault();\n        console.log({ ...this.state.newFacilitator, id: this.props.facilitator.id });\n        axios.put('/api/user/register/', { ...this.state.newFacilitator, id: this.props.facilitator.id }) // newFacilitator includes all the db fields\n            .then((response) => {\n                console.log('this is the response for update facilitator', response.status);\n                if (response.status === 200) {\n                    swal(\"Your facilitator was updated in the database!\", \"success\");\n                }\n            }).catch((error) => {\n                console.log('error making update', error);\n            });\n    }\n\n\n    render() {\n        return (\n            <div>\n                <form className=\"container-fluid\" style={{ height: \"100%\" }} onSubmit={this.handleFormSubmit}>\n                    {/* Row 1 */}\n\n                    <div className=\"row\">\n                        <div>Username:\n                            <label>\n                                <input\n                                    type=\"text\"\n                                    name=\"username\"\n                                    value={this.state.newFacilitator.username}\n                                    onChange={this.handleInput}\n                                    placeholder=\"Username\"\n                                />\n                            </label>\n                        </div>\n                        {this.props.action === 'add' && \n                        <div>Password:\n                            <label>\n                                <input\n                                    type=\"text\"\n                                    name=\"password\"\n                                    value={this.state.newFacilitator.password}\n                                    onChange={this.handleInput}\n                                    placeholder=\"Password\"\n                                />\n                            </label>\n                        </div>\n                        }\n                    </div>\n\n                    <div className=\"row\">\n                        <div>First Name:\n                            <label>\n                                <input\n                                    type=\"text\"\n                                    name=\"first_name\"\n                                    value={this.state.newFacilitator.first_name}\n                                    onChange={this.handleInput}\n                                    placeholder=\"First Name\"\n                                />\n                            </label>\n                        </div>\n\n                        <div>Last Name:\n                            <label>\n                                <input\n                                    type=\"text\"\n                                    name=\"last_name\"\n                                    value={this.state.newFacilitator.last_name}\n                                    onChange={this.handleInput}\n                                    placeholder=\"Last Name\"\n                                />\n                            </label>\n                        </div>\n                    </div>\n\n\n                    {/* Row 2 */}\n                    <div className=\"row\">\n                        <div>Email:\n                            <label>\n                                <input\n                                    type=\"text\"\n                                    name=\"email\"\n                                    value={this.state.newFacilitator.email}\n                                    onChange={this.handleInput}\n                                    placeholder=\"Email\"\n                                />\n                            </label>\n                        </div>\n                        <div>Organization:\n                            <label>\n                                <input\n                                    type=\"text\"\n                                    name=\"organization\"\n                                    value={this.state.newFacilitator.organization}\n                                    onChange={this.handleInput}\n                                    placeholder=\"Organization\"\n                                />\n                            </label>\n                        </div>\n                        <div>Phone Number:\n                            <label>\n                                <input\n                                    type=\"text\"\n                                    name=\"phone_number\"\n                                    value={this.state.newFacilitator.phone_number}\n                                    onChange={this.handleInput}\n                                    placeholder=\"Phone Number\"\n                                />\n                            </label>\n                        </div>\n                    </div>\n\n                    {/* Row 4 */}\n                    <div className=\"row\">\n                        <div>Facilitator?\n                            <label>\n                                <Select\n                                    // title={\"Facilitator\"}\n                                    name={\"is_facilitator\"}\n                                    options={this.state.is_facilitator_options}\n                                    value={this.state.newFacilitator.is_facilitator}\n                                    placeholder={\"True or False\"}\n                                    handleChange={this.handleInput}\n                                />\n                            </label>\n                        </div>\n                    </div>\n\n                    {/* Row 5 */}\n                    <div className=\"row\">\n                        <div>Administrator?\n                            <label>\n                                <Select\n                                    // title={\"Administrator\"}\n                                    name={\"is_admin\"}\n                                    options={this.state.is_admin_options}\n                                    value={this.state.newFacilitator.is_admin}\n                                    placeholder={\"True or False\"}\n                                    handleChange={this.handleInput}\n                                />\n                            </label>\n                        </div>\n                    </div>\n\n\n                    <Button\n                        action={this.props.action === 'add' ? this.handleFormSubmit : this.handleUpdate} //if the action is add, the function called will be handleFormSubmit\n                        type={\"primary\"}\n                        title={this.props.action === 'add' ? \"Submit\" : \"Update\"} //if this.props.action = add, then show the submit button\n                        style={buttonStyle}         //add is on the InfoPage -- if not add, it will be edit\n                    />{\" \"}\n                    {/*Submit */}\n                    <Button\n                        action={this.handleClearForm}\n                        type={\"secondary\"}\n                        title={\"Clear\"}\n                        style={buttonStyle}\n                    />{\" \"}\n                    {/* Clear the form */}\n                    {this.props.action === 'edit' ? //if this.props.action == 'edit', then the delete button will also show\n                        <Button\n                            action={this.handleDeleteFacilitator}\n                            type={\"secondary\"}\n                            title={\"Delete\"}\n                            style={buttonStyle}\n                        />      // if this.props.action is anything else, (add), then show null/nothing\n                        : null}\n                </form>\n            </div>\n        );\n    }\n}\n\nconst buttonStyle = {\n    margin: \"10px 10px 10px 10px\"\n};\n\nexport default FacilitatorForm;","import React, { Component } from 'react';\nimport axios from 'axios';\n// import QuestionForm from './QuestionForm';\n\n\nimport {\n  Accordion,\n  AccordionItem,\n  AccordionItemTitle,\n  AccordionItemBody,\n} from 'react-accessible-accordion';\n// 'Fancy' theme - boilerplate styles for all components:\nimport 'react-accessible-accordion/dist/fancy-example.css';\nimport FacilitatorForm from './FacilitatorForm';\n\n// This is one of our simplest components\n// It doesn't have local state, so it can be a function component.\n// It doesn't dispatch any redux actions or display any part of redux state\n// or even care what the redux state is, so it doesn't need 'connect()'\n\nclass AdminPage extends Component {\n\n  state = {\n    data: [],\n  }\n\n  componentDidMount() {\n    this.getFacilitatorInfo(); // call getFacilitatorInfo on page load to display all the facilitators\n  }\n\n\n  getFacilitatorInfo = () => {\n    axios.get('/api/user/register/')\n      .then((response) => {\n        console.log('this is the response for facilitators', response);\n        this.setState({ ...this.state, data: response.data }); // master list of all facilitators\n        console.log(this.state);\n        console.log('I am here');\n      }).catch((error) => {\n        console.log('error making get', error);\n      });\n  }\n\n  createHtmlForPanel(facilitator) {\n    \n      return (   //this creates the html for the panel for each question\n\n        <AccordionItem>\n          {/* style={{ border: '1px solid lightgray', color: 'gray', width: '70vw', align: 'center' }} */}\n          <AccordionItemTitle >\n            <h4>{facilitator.first_name} {facilitator.last_name}</h4>\n          </AccordionItemTitle>\n          <AccordionItemBody>\n            <FacilitatorForm\n              action=\"edit\"  // updates the question form based on this function or add\n              facilitator={facilitator}  // javascript variable in html code\n            />\n          </AccordionItemBody>\n        </AccordionItem>\n      )\n    }\n    \n  \n\n  render() {\n    let facilitatorPanels = this.state.data.map(facilitator => this.createHtmlForPanel(facilitator)) // panel created outside of the render\nconsole.log('HELLOOOOOO!!!!!!!!!!!!!!!!!!')\n    console.log(this.state.data);\n    return (\n\n      <div>\n        <div className=\"preAccordion\" >\n          <h4>1. To add a new facilitator to database, complete the form.</h4>\n          <h4>2. To edit a facilitator's status in the database, select a facilitator name below.</h4>\n        </div>\n        <div className=\"preAccordion\">\n            <h4>Add a new facilitator here:</h4>\n          </div>\n        <div className=\"accordion\">\n            <FacilitatorForm\n              action=\"add\"  // updates the question form based on this function or edit\n            />\n          </div>\n        <div className=\"accordion\">\n          <Accordion>\n            {facilitatorPanels}\n          </Accordion>\n        </div>\n        <div>\n\n          \n          \n        </div>\n\n\n      </div>\n\n    )\n\n\n  }\n\n}\n\n\nexport default AdminPage;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Axios from 'axios';\n\nclass ResultsPage extends Component {\n  state = {\n    email: '',\n    emailSent: false,\n  }\n\n  handleChange = event => {\n    this.setState({\n      email: event.target.value,\n    })\n  }\n\n  submitEmail = () => {\n    Axios({\n      method: 'POST',\n      url: '/game/get/results',\n      data: {\n        email: this.state.email,\n        id: this.props.state.game.player.id,\n      }\n    })\n      .then(response => {\n        this.setState({\n          emailSent: true,\n        })\n      })\n      .catch(err => {\n        alert(err);\n      })\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.emailSent ?\n          <div>\n            <h1>Thanks for playing</h1>\n            <h3>Your results have been sent to your email: {this.state.email}</h3>\n          </div>\n          :\n          <div>\n            <h1>Get Your Results</h1>\n            <h2>Thanks for playing</h2>\n            <input\n              type=\"text\"\n              value={this.state.email}\n              onChange={this.handleChange}\n              placeholder=\"Enter your email\"\n            />\n            <button\n              onClick={this.submitEmail}\n            >\n              Get Results\n          </button>\n          </div>\n        }\n      </div>\n    );\n  }\n}\n\n\nconst mapStateToProps = state => ({\n  state\n});\n\nexport default connect(mapStateToProps)(ResultsPage);","/** Discussion\n * facilitator can see which players have spoken and which haven't\n * facilitator can select a player to speak\n * facilitator can mark a player as done speaking\n * facilitator can advance to next game state\n */\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass Discussion extends Component {\n\n  render() {\n    return (\n      <div className=\"threeContentContainer\">\n        {this.props.state.game.selectedPlayer && this.props.state.game.selectedPlayer.id &&\n          <div className=\"discussion-ball-container\">\n            <h2>Selected Player</h2>\n            <h2>{this.props.state.game.selectedPlayer.name}</h2>\n            <h3>Intention: {this.props.state.game.selectedPlayer.intention}</h3>\n            <h3>Question: {this.props.state.game.selectedPlayer.current_card}</h3>\n            {this.props.state.user.userReducer && this.props.state.user.userReducer.is_facilitator &&\n              <button\n                onClick={() => this.props.markDone(this.props.state.game.selectedPlayer)}\n              >Mark Complete</button>\n\n            }\n           </div>\n        }\n        {this.props.state.user.userReducer && this.props.state.user.userReducer.is_facilitator &&\n          <button onClick={() => this.props.advanceStage(\n            this.props.calculateNextStage('0'), true\n          )}>Next</button>\n        }\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  state\n});\n\nexport default connect(mapStateToProps)(Discussion);","/** RoundIntro\n * waiting view *\n * facilitator can advance to next game state\n * advancing to next game state also deals cards to players\n */\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass RoundIntro extends Component {\n\n  render() {\n    return (\n      <div className=\"threeContentContainer\">\n        {this.props.state.user.userReducer && this.props.state.user.userReducer.is_facilitator &&\n          <button onClick={() => {\n            //deal cards\n            this.props.dealCards();\n            //advance game\n            this.props.advanceStage(this.props.calculateNextStage('1'))\n          }\n          }>Deal Cards</button>\n        }\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  state\n});\n\nexport default connect(mapStateToProps)(RoundIntro);","/** AnswerCard\n * player can input an answer to the question and dispatch it to server\n * facilitator can see which players have submitted their response\n * facilitator can advance to next game state\n */\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Card from '../../Card/Card'\n\nclass AnswerCard extends Component {\n\n  render() {\n    return (\n      <div>\n        {this.props.state.user.userReducer && this.props.state.user.userReducer.is_facilitator ?\n          <div className=\"threeContentContainer\">\n            <button onClick={() => this.props.advanceStage(\n              this.props.calculateNextStage('2')\n            )}>Next</button>\n          </div>\n          :\n          <>\n          <Card flipped={true} question={{\n              intention: this.props.state.game.player.intention,\n              stage_id: this.props.state.game.gameState[0],\n              text: this.props.state.game.player.current_card\n            }} />\n         </>   \n        }\n        \n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  state,\n});\n\nexport default connect(mapStateToProps)(AnswerCard);","/** GameRounds\n * module routes between views during the game round\n * sub components conditionally rendered based on game state in redux\n * there are five rounds in the game\n * redux state, calculateNextStage, and the conditional rendering handle advancing through the rounds\n */\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\n//import sub components\nimport Discussion from './Discussion';\nimport RoundIntro from './RoundIntro';\nimport AnswerCard from './AnswerCard';\n\n\nclass GameRounds extends Component {\n    render() {\n        return (\n            <div>\n                {this.props.state.game.gameState[1] == '0' &&\n                    <RoundIntro\n                        advanceStage={this.props.advanceStage}\n                        calculateNextStage={this.props.calculateNextStage}\n                        dealCards={this.props.dealCards} // facilitator deals cards to players\n                    />\n                }\n                {this.props.state.game.gameState[1] == '1' &&\n                    <AnswerCard\n                        advanceStage={this.props.advanceStage}\n                        calculateNextStage={this.props.calculateNextStage}\n                        editJournal={this.props.editJournal} // player edits journal in this sub component\n                        advanceToDiscussion={this.props.advanceToDiscussion}\n                    />\n                }\n                {this.props.state.game.gameState[1] == '2' &&\n                    <Discussion\n                        advanceStage={this.props.advanceStage}\n                        calculateNextStage={this.props.calculateNextStage}\n                        selectPlayer={this.props.selectPlayer} // facilitator selects player to start talking\n                        markDone={this.props.markDone} // facilitator marks player as done talking\n                    />\n                }\n            </div>\n        )\n    }\n}\n\n\nconst mapStateToProps = state => ({\n    state\n});\n\nexport default connect(mapStateToProps)(GameRounds);","/** PostGame\n * module is final view of game\n * sub components conditionally rendered based on game state in redux\n */\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\n\nclass PostGame extends Component {\n    render() {\n        return (\n            <div className=\"threeContentContainer\">\n                {this.props.state.user.userReducer && this.props.state.user.userReducer.is_facilitator &&\n                    <button onClick={() => {\n                        this.props.endGame(true)\n                        //also clear facilitators redux state later\n                    }}>Next</button>\n                }\n            </div>\n        )\n    }\n}\n\n\nconst mapStateToProps = state => ({\n    state\n});\n\nexport default connect(mapStateToProps)(PostGame);","/** IntentionInput\n * player can input an intention and dispatch it to server\n * facilitator can see which players have submitted their intention\n * facilitator can advance to next game state\n */\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass IntentionInput extends Component {\n  \n  render() {\n    return (\n      <div className=\"threeContentContainer\">\n        {this.props.state.user.userReducer && this.props.state.user.userReducer.is_facilitator ?\n          <div className=\"facilitator\">\n            <button onClick={() => this.props.advanceStage(\n              this.props.calculateNextStage('0')\n            )}>Next</button>\n          </div>\n          :\n          null\n        }\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  state\n});\n\nexport default connect(mapStateToProps)(IntentionInput);","/** IntentionIntro\n * waiting view *\n * facilitator can advance to next game state\n */\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass IntentionIntro extends Component {\n\n  render() {\n    return (\n      <div className=\"threeContentContainer\">\n      { this.props.state.user.userReducer && this.props.state.user.userReducer.is_facilitator &&\n        <button onClick={() => {this.props.advanceStage(\n           this.props.calculateNextStage('2')\n        )\n        }\n      }>Next</button>\n    }\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  state\n});\n\nexport default connect(mapStateToProps)(IntentionIntro);\n","/** GameLobby\n * player can input an intention and dispatch it to server\n * facilitator can see which players have submitted their intention\n * facilitator can advance to next game state\n */\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass GameLobby extends Component {\n    state = {\n        intention: '',\n    }\n\n    handleChange = event => {\n        this.setState({\n            intention: event.target.value,\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"threeContentContainer\">\n                <div className=\"facilitator\">\n                    {this.props.state.user.userReducer && this.props.state.user.userReducer.is_facilitator ?\n                        <button onClick={() => this.props.advanceStage(\n                            this.props.calculateNextStage('1')\n                        )}>Next</button>\n                        :\n                        null\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    state\n});\n\nexport default connect(mapStateToProps)(GameLobby);","/** GameStart\n * module routes between first views of game \n * sub components conditionally rendered based on game state in redux\n */\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\n//import sub components\nimport IntentionInput from './IntentionInput';\nimport IntentionIntro from './IntentionIntro';\nimport GameLobby from './GameLobby';\n\nclass GameRounds extends Component {\n    render() {\n        return (\n            <div>\n                 {this.props.state.game.gameState[1] == '0' &&\n                    <GameLobby\n                        advanceStage={this.props.advanceStage}\n                        calculateNextStage={this.props.calculateNextStage}\n                    />\n                }\n                {this.props.state.game.gameState[1] == '1' &&\n                    <IntentionIntro\n                        advanceStage={this.props.advanceStage}\n                        calculateNextStage={this.props.calculateNextStage}\n                    />\n                }\n                {this.props.state.game.gameState[1] == '2' &&\n                    <IntentionInput\n                        advanceStage={this.props.advanceStage}\n                        calculateNextStage={this.props.calculateNextStage}\n                        editIntention={this.props.editIntention} //player enters in intention in this component\n                    />\n                }\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    state\n});\n\nexport default connect(mapStateToProps)(GameRounds);","/** PlayerLogin\n * player can\n * --> input name and code\n * --> press button to join game\n * --> be redirected to the first view of the game\n */\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass PlayerLogin extends Component {\n  state = {\n    info: {\n      player: '',\n      code: '',\n    },\n    joinRejoin: false,\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      info: {\n        ...this.state.info,\n        [event.target.name]: event.target.value,\n      }\n    })\n  }\n\n\n  render() {\n    return (\n      <div className=\"threeContentContainer\">\n        <button onClick={() => this.setState({\n          ...this.state,\n          joinRejoin: !this.state.joinRejoin,\n        })}>{this.state.joinRejoin ? <p>Join Game</p> : <p>Re-Join Game</p>}</button>\n        <label>\n          Player Name\n          <input onChange={this.handleChange} placeholder=\"Name\" name=\"player\" value={this.state.player}></input>\n        </label>\n        <label>\n          Code\n          <input onChange={this.handleChange} placeholder=\"Code\" name=\"code\" value={this.state.code}></input>\n        </label>\n        {\n          this.state.joinRejoin ?\n          <button onClick={() => this.props.joinGame(this.state.info.player, this.state.info.code, true)}>Re-Join Game</button>\n          :\n          <button onClick={() => this.props.joinGame(this.state.info.player, this.state.info.code, false)}>Join Game</button>\n        }\n      </div>\n    );\n  }\n}\n\n\nconst mapStateToProps = state => ({\n  state\n});\n\nexport default connect(mapStateToProps)(PlayerLogin);\n","/** FacilitatorLogIn\n * carbon copy of log in page\n * facilitator logs in and are redirected to the create game view\n */\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass FacilitatorLogin extends Component {\n\n  render() {\n    return (\n      <div className=\"threeContentContainer\">  \n      </div>\n    );\n  }\n}\n\n\nconst mapStateToProps = state => ({\n  errors: state.errors,\n});\n\nexport default connect(mapStateToProps)(FacilitatorLogin);","/** FacilitatorCreateGame\n * facilitator can\n * --> start a game\n * --> share code (by saying it to people aloud)\n * --> watch as players join and their names show up\n * --> choose to advance to the game\n */\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass FacilitatorCreateGame extends Component {\n\n  componentDidMount() {\n    this.props.dispatch({ type: 'FETCH_GAMES' });\n  }\n\n  render() {\n    return (\n      <div className=\"threeContentContainer\">\n        <div className=\"join-game-ball\">\n          {this.props.state.selectedGame && this.props.state.selectedGame.id &&\n            <div>\n              <h4 className=\"join-game-ball\">{this.props.state.selectedGame.name}</h4>\n              <h5 className=\"join-game-ball\">{this.props.state.selectedGame.code}</h5>\n              <h6 className=\"join-game-ball\"> Players: {this.props.state.selectedGame.active}</h6>\n              <button onClick={() => this.props.facilitatorJoinGame(this.props.state.selectedGame)}>Join</button>\n              <button onClick={() => this.props.endGame(false)}>End</button>\n            </div>\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  state,\n});\n\nexport default connect(mapStateToProps)(FacilitatorCreateGame);","/** PreGame\n * module for routing within the pregame stage\n * first view offers choice of facilitator or player\n * players\n * --> join game with code and name\n * facilitators\n * --> log in with username and password\n * --> create game and share code\n * --> choose to advance to game\n */\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\n//include sub components\nimport PlayerLogin from './PlayerLogin';\nimport FacilitatorLogin from './FacilitatorLogin';\nimport FacilitatorCreateGame from './FacilitatorCreateGame';\n\nclass PreGame extends Component {\n    componentDidMount() {\n        setTimeout(\n            () => {\n                if (this.props.state.user.userReducer && this.props.state.user.userReducer.is_facilitator) {\n                    this.props.dispatch({ type: 'SET_USER_TYPE', payload: 'facilitator' })\n                } else {\n                    this.props.dispatch({ type: 'SET_USER_TYPE', payload: 'player' })\n                }\n            }, 1000\n        )\n    }\n\n    facilitator = () => {\n        this.props.dispatch({ type: 'SET_USER_TYPE', payload: 'facilitator' })\n    }\n\n    player = () => {\n        this.props.dispatch({ type: 'SET_USER_TYPE', payload: 'player' })\n    }\n\n    render() {\n        return (\n            <div>\n                {\n                    this.props.state.user.userType === '' &&\n                    null\n                }\n                {\n                    this.props.state.user.userType === 'player' &&\n                    <div>\n                        <PlayerLogin\n                            //sub component requires\n                            joinGame={this.props.joinGame}\n                            facilitator={this.facilitator}\n                        />\n                    </div>\n                }\n                {\n                    this.props.state.user.userType === 'facilitator' &&\n                    <div>\n                        {this.props.state.user.userReducer && this.props.state.user.userReducer.is_facilitator ?\n                            <FacilitatorCreateGame\n                                //sub component requires \n                                createGame={this.props.createGame}\n                                facilitatorJoinGame={this.props.facilitatorJoinGame}\n                                endGame={this.props.endGame}\n                            />\n                            :\n                            <FacilitatorLogin\n                                player={this.player}\n                            />\n                        }\n                    </div>\n                }\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    state,\n});\n\nexport default connect(mapStateToProps)(PreGame);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass Journal extends Component {\n    openQuestionNumber = questionKey => {\n        this.question_one.style.display = 'none';\n        this.question_two.style.display = 'none';\n        this.question_three.style.display = 'none';\n        this.question_four.style.display = 'none';\n        this.question_five.style.display = 'none';\n\n        this.question_one_tab.classList.remove('journal-active')\n        this.question_two_tab.classList.remove('journal-active')\n        this.question_three_tab.classList.remove('journal-active')\n        this.question_four_tab.classList.remove('journal-active')\n        this.question_five_tab.classList.remove('journal-active')\n\n        let tabKey = questionKey + '_tab';\n\n        this[tabKey].classList.add('journal-active');\n        this[questionKey].style.display = 'block';\n    }\n\n    componentDidMount(){\n        this.openQuestionNumber('question_one');\n    }\n\n    render() {\n        return (\n            <div className=\"journal\" >\n                <h3>Journal</h3>\n\n                <div className=\"tab\">\n                    <button ref={ref => this.question_one_tab = ref} className=\"tablinks\" onClick={() => this.openQuestionNumber('question_one')}>Question One</button>\n                    <button ref={ref => this.question_two_tab = ref} className=\"tablinks\" onClick={() => this.openQuestionNumber('question_two')}>Question Two</button>\n                    <button ref={ref => this.question_three_tab = ref} className=\"tablinks\" onClick={() => this.openQuestionNumber('question_three')}>Question Three</button>\n                    <button ref={ref => this.question_four_tab = ref} className=\"tablinks\" onClick={() => this.openQuestionNumber('question_four')}>Question Four</button>\n                    <button ref={ref => this.question_five_tab = ref} className=\"tablinks\" onClick={() => this.openQuestionNumber('question_five')}>Question Five</button>\n                </div>\n\n                <div id=\"QuestionOne\" ref={ref => this.question_one = ref} className=\"tabcontent\">\n                    <h4>Map Movement</h4>\n                    <p>{this.props.journal.question_one}</p>\n                    <p>{this.props.journal.response_one}</p>\n                </div>\n\n                <div id=\"QuestionTwo\" ref={ref => this.question_two = ref} className=\"tabcontent\">\n                    <h4>Open Movement</h4>\n                    <p>{this.props.journal.question_two}</p>\n                    <p>{this.props.journal.response_two}</p>\n                </div>\n\n                <div id=\"QuestionThree\" ref={ref => this.question_three = ref} className=\"tabcontent\">\n                    <h4>Visualize Movement</h4>\n                    <p>{this.props.journal.question_three}</p>\n                    <p>{this.props.journal.response_three}</p>\n                </div>\n\n                <div id=\"QuestionFour\" ref={ref => this.question_four = ref} className=\"tabcontent\">\n                    <h4>Engage Movement</h4>\n                    <p>{this.props.journal.question_four}</p>\n                    <p>{this.props.journal.response_four}</p>\n                </div>\n\n                <div id=\"QuestionFive\" ref={ref => this.question_five = ref} className=\"tabcontent\">\n                    <h5>Sustain Movement</h5>\n                    <p>{this.props.journal.question_five}</p>\n                    <p>{this.props.journal.response_five}</p>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    state,\n    journal: state.game.journal,\n});\n\nexport default connect(mapStateToProps)(Journal);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\n\n\nclass FacilitatorSidebar extends Component {\n\n    state = {\n        gameConfig: {\n            name: '',\n            deckId: '',\n            maxPlayers: '',\n            showDirections: '',\n        },\n    }\n\n    handleChange = (event) => {\n        this.setState({\n            gameConfig: {\n                ...this.state.gameConfig,\n                [event.target.name]: event.target.value,\n            }\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                {this.props.state.game.game && this.props.state.game.game.id ?\n                    <React.Fragment>\n                        <h1>{this.props.state.game.game.name}</h1>\n                        <ul>\n                            <li>Deck ID:{this.props.state.game.game.deck_id}</li>\n                            <li>Max Players:{this.props.state.game.game.max_players}</li>\n                            {this.props.state.game.game.can_kick &&\n                                <li>Can Kick</li>\n                            }\n                            {this.props.state.game.game.show_directions &&\n                                <li>Show Directions</li>\n                            }\n                        </ul>\n                    </React.Fragment>\n                    :\n                    <React.Fragment>\n                        <h1>New Game</h1>\n                        <label>\n                            Name your game!\n                            <br></br>\n                            <input onChange={this.handleChange} placeholder=\"Name\" name=\"name\" value={this.state.name}></input>\n                        </label>\n                        <br></br>\n                        <div className=\"select-container\">\n\n                            <label>\n                                Choose your deck.\n                   {/* Will map through saved decks for this select */}\n                                <select\n                                    onChange={this.handleChange}\n                                    name=\"deckId\"\n                                    value={this.state.gameConfig.deckId}\n                                >\n                                    <option>choose an option</option>\n                                    {this.props.state.decks.decks.map(deck => {\n                                        return (<option value={deck.id}>{deck.description}</option>\n                                        );\n                                    })}\n                                </select>\n                            </label>\n                        </div>\n                        <br></br>\n                        <div className=\"select-container\">\n\n                            <label>\n                                Set max player count\n                    <select\n                                    onChange={this.handleChange}\n                                    value={this.state.gameConfig.maxPlayers}\n                                    name=\"maxPlayers\"\n                                >\n                                    <option>choose an option</option>\n                                    <option value={4}>Four</option>\n                                    <option value={5}>Five</option>\n                                    <option value={6}>Six</option>\n                                    <option value={7}>Seven</option>\n                                    <option value={8}>Eight</option>\n                                </select>\n                            </label>\n                        </div>\n                        <br></br>\n                        <div className=\"select-container\">\n                            <label>\n                                Show directions in chat?\n                    <select\n                                    onChange={this.handleChange}\n                                    value={this.state.gameConfig.showDirections}\n                                    name=\"showDirections\"\n                                >\n                                    <option>choose an option</option>\n                                    <option value={true}>yes</option>\n                                    <option value={false}>no</option>\n                                </select>\n                            </label>\n                        </div>\n                        <br></br>\n                        <button onClick={() => {\n                            this.props.createGame(this.state.gameConfig)\n                            this.setState({\n                                gameConfig: {\n                                    name: '',\n                                    deckId: '',\n                                    maxPlayers: '',\n                                    canKick: '',\n                                    showDirections: '',\n                                },\n                            })\n                        }}>Create A New Game</button>\n                    </React.Fragment>\n                }\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    state,\n});\n\nexport default connect(mapStateToProps)(FacilitatorSidebar);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\n\n\nclass PlayInstructions extends Component {\n\n    render() {\n        return (\n            <div>\n                <div className=\"PlayInstructions topSquare\">\n                    <h1 className=\"PlayInstructions\">Your Wise Moves&trade;</h1>\n                    <p className=\"PlayInstructions\">\n                        The objective of the game is to ignite your wisdom, align your intuition and purpose, and clarify your way forward.\n                        This fun, fresh approach brings awareness in the area you choose for enhanced life, work and relationships. Play it to energize\n                        and renew yourself to wisely move forward and est intentions into motion.\n                </p>\n                </div>\n                <div className=\"PlayInstructions bottomSquare\">\n                <ul className=\"PlayInstructions\">\n                    <h2 className=\"PlayInstructions\">\n                        Are you ready to play the game?\n                    </h2>\n                    <li>Do you want clarity about your current vision?</li>\n                    <li>Do you have goals you'd like to further?</li>\n                    <li>Would you like to release obstacles and increase your creative energy?</li>\n                    <li>Do you want to discover each other's passions?</li>\n                    <li>Are you willing to share your thoughts with others playing the game and receive helpful perspectives?</li>\n                </ul>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    state,\n});\n\nexport default connect(mapStateToProps)(PlayInstructions);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Journal from './Journal';\nimport FacilitatorSidebar from './FacilitatorSidebar';\nimport PlayInstructions from './PlayInstructions';\n\nclass Sidebar extends Component {\n    state = {\n        trigger: false,\n    }\n\n    triggerSidebar = (event) => {\n        if (this.state.trigger === false) {\n            console.log('Hello');\n            this.sidebar.className = \"sidebar showSidebar\"\n            event.target.className = \"sidebarButton moveSidebarButton\"\n            this.setState({\n                trigger: !this.state.trigger,\n            })\n        } else {\n            console.log('goodbye');\n            event.target.className = \"sidebarButton moveSidebarButtonBack\"\n            this.sidebar.className = \"sidebar hideSidebar\"\n            this.setState({\n                trigger: !this.state.trigger,\n            })\n\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <button className=\"sidebarButton\" onClick={this.triggerSidebar}>Side Bar</button>\n                <div ref={ref => this.sidebar = ref} className=\"sidebar\">\n                {this.props.state.user.userReducer && this.props.state.user.userReducer.is_facilitator ?\n                    <FacilitatorSidebar \n                        createGame={this.props.createGame}\n                    />\n                    :\n                    this.props.state.game.game && this.props.state.game.game.id ?\n                    <Journal />\n                    :\n                    <PlayInstructions />\n                }\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    state,\n});\n\nexport default connect(mapStateToProps)(Sidebar);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass Chat extends Component {\n\n    state = {\n        newMessage: '',\n        trigger: false,\n    }\n\n    triggerChatPanel = (event) => {\n        console.log(this.state.trigger);\n\n        if (this.state.trigger === false) {\n            this.chatPanel.className = \"chatPanel showChatPanel\"\n            event.target.className = \"chatPanelButton moveChatPanelButton\"\n            this.setState({\n                trigger: !this.state.trigger,\n            })\n        } else {\n            event.target.className = \"chatPanelButton moveChatPanelButtonBack\"\n            this.chatPanel.className = \"chatPanel hideChatPanel\"\n            this.setState({\n                trigger: !this.state.trigger,\n            })\n        }\n    }\n\n\n    handleChange = event => {\n        this.setState({\n            ...this.state,\n            newMessage: event.target.value,\n        })\n    }\n\n    messageSubmit = event => {\n        event.preventDefault();\n        console.log('submit')\n        this.props.sendMessage(this.state.newMessage)\n        this.setState({\n            newMessage: '',\n        })\n    }\n\n    scrollToBottom() {\n        const scrollHeight = this.chatBox.scrollHeight;\n        const height = this.chatBox.clientHeight;\n        const maxScrollTop = scrollHeight - height;\n        this.chatBox.scrollTop = maxScrollTop > 0 ? maxScrollTop : 0;\n    }\n\n    componentDidMount() {\n        if (this.props.state.game.game && this.props.state.game.game.id) {\n            this.scrollToBottom();\n        }\n    }\n\n    componentDidUpdate() {\n        if (this.props.state.game.game && this.props.state.game.game.id) {\n            this.scrollToBottom();\n        }\n    }\n\n    render() {\n        return (\n\n            this.props.state.game.game && this.props.state.game.game.id ?\n                <div>\n                    <button className=\"chatPanelButton\" onClick={this.triggerChatPanel}>Chat Panel</button>\n                    <div className=\"chatPanel\" ref={ref => this.chatPanel = ref}>\n                        <h4 className=\"chatHeader\">Game Chat</h4>\n                        <ul className=\"messageHistory\" ref={ref => this.chatBox = ref}>\n                            {\n                                this.props.state.chat.map(message => {\n                                    let classes; \n                                    if (message.from === 'guide') {\n                                        classes += ' messageGreen'\n                                    }\n                                    return (\n                                        <li className='message' key={message.id}><span className=\"chatName capitalize\">{message.from}:</span> <span className={classes}>{message.text}</span></li>\n                                    );\n                                    \n                                })\n                            }\n                        </ul>\n                        <div style={{ float: \"left\", clear: \"both\" }}\n                            ref={(el) => { this.messagesEnd = el; }}>\n                        </div>\n                        <form className=\"messageInput\" onSubmit={this.messageSubmit}>\n                        <input\n                            type=\"text\"\n                            placeholder=\"your message here\"\n                            onChange={this.handleChange}\n                            value={this.state.newMessage}\n                            className=\"messageText\"\n                        />\n                        <button\n                            type=\"submit\"\n                            className=\"messageSubmit\"\n                        >\n                            Submit\n                     </button>\n                    </form>\n                </div>\n            </div >\n\n                :\n        null\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    state,\n});\n\nexport default connect(mapStateToProps)(Chat);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport {withRouter} from 'react-router-dom'\nimport LogOutButton from '../LogOutButton/LogOutButton';\n\nclass ActionPanel extends Component {\n    state = {\n        trigger: false,\n        username: '',\n        password: '',\n        intention: '',\n        response: '',\n    }\n\n    triggerActionPanel = (event) => {\n        console.log(this.state.trigger);\n        if (this.state.trigger === false) {\n            this.actionPanel.className = \"actionPanel showActionPanel\"\n            event.target.className = \"actionPanelButton moveActionPanelButton\"\n            this.setState({\n                trigger: !this.state.trigger,\n            })\n        } else {\n            event.target.className = \"actionPanelButton moveActionPanelButtonBack\"\n            this.actionPanel.className = \"actionPanel hideActionPanel\"\n            this.setState({\n                trigger: !this.state.trigger,\n            })\n        }\n    }\n\n    selectGame = event => {\n        this.props.dispatch({ type: 'CLEAR_SELECT_GAME' })\n        this.props.dispatch({ type: 'SELECT_GAME', payload: { id: event.target.value, games: this.props.state.games } })\n    }\n\n    login = (event) => {\n        event.preventDefault();\n\n        if (this.state.username && this.state.password) {\n            this.props.dispatch({\n                type: 'LOGIN',\n                payload: {\n                    username: this.state.username,\n                    password: this.state.password,\n                },\n            });\n        } else {\n            this.props.dispatch({ type: 'LOGIN_INPUT_ERROR' });\n        }\n    } // end login\n\n    handleInputChangeFor = propertyName => (event) => {\n        this.setState({\n            [propertyName]: event.target.value,\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <button className=\"actionPanelButton\" onClick={this.triggerActionPanel}>Action Panel</button>\n\n                <div ref={ref => this.actionPanel = ref} className=\"actionPanel\">\n\n                    <h4>{this.props.state.game.game.code}</h4>\n                    {this.props.state.game.gameState[0] === '0' &&\n                        this.props.state.gameCode !== '' ?\n                        <div>\n                            {this.props.state.game.gameState[1] == '0' &&\n                                <div>\n                                    <h1>Game Lobby</h1>\n                                    <ol>\n                                        {\n                                            this.props.state.game.allPlayers.map(player => {\n                                                if (player.in_game) {\n                                                    return (\n                                                        <li key={player.id}>{player.name}</li>\n                                                    )\n                                                }\n                                            })\n                                        }\n                                    </ol>\n                                </div>\n                            }\n                            {this.props.state.game.gameState[1] == '1' &&\n                                <div>\n                                    <h1>Intention Intro</h1>\n                                </div>\n                            }\n                            {this.props.state.game.gameState[1] == '2' &&\n                                <div>\n                                    <h1>Intention Input</h1>\n                                    {this.props.state.user.userReducer && this.props.state.user.userReducer.is_facilitator ?\n                                        <div className=\"facilitator\">\n                                            <ol>\n                                                {\n                                                    this.props.state.game.allPlayers.map(player => {\n                                                        return (\n                                                            <li key={player.id}>{player.name} Intention:{player.intention ? <p>Yes</p> : <p>No</p>}</li>\n                                                        )\n                                                    })\n                                                }\n                                            </ol>\n\n                                        </div>\n                                        :\n                                        <div>\n                                            <textarea\n                                                type=\"text\"\n                                                placeholder=\"Set your Intention or Question\"\n                                                onChange={this.handleInputChangeFor('intention')}\n                                            />\n                                            <button\n                                                onClick={() => this.props.editIntention(this.state.intention)}\n                                            >\n                                                Save Intention\n                                        </button>\n                                        </div>\n                                    }\n                                </div>\n                            }\n                        </div>\n                        :\n                        this.props.state.game.gameState[0] === '0' ?\n                            <div>\n                                {\n                                    this.state.userType === '' &&\n                                    null\n                                }\n                                {\n                                    this.props.state.user.userType === 'player' &&\n                                    <div>\n                                        <h1>Facilitator Login</h1>\n                                        <h5>You do not need an account to play! Just join a game with a code provided to you by a licensed facilitator.</h5>\n                                        <button onClick={() => this.props.dispatch({ type: 'SET_USER_TYPE', payload: 'facilitator' })}>Log in as facilitator</button>\n                                    </div>\n                                }\n                                {\n                                    this.props.state.user.userType === 'facilitator' &&\n                                    <div>\n                                        {this.props.state.user.userReducer && this.props.state.user.userReducer.is_facilitator ?\n                                            <div className=\"ActionPanel-Main\">\n                                                <h1>Game Management</h1>\n                                                <h2>Your Games</h2>\n                                                <div className=\"select-container\">\n                                                    <select\n                                                        onChange={\n                                                            this.selectGame\n                                                        }\n                                                    >\n                                                        <option value={null}>Select a Game</option>\n                                                        {this.props.state.games.map(game => {\n                                                            return (\n                                                                <option key={game.id}\n                                                                    value={game.id}\n                                                                >{game.name} Code: {game.code}</option>\n                                                            );\n                                                        })}\n                                                    </select>\n                                                </div>\n                                                <br></br>\n                                                <button\n                                                    onClick={() => this.props.history.push('/admin')}\n                                                >\n                                                    Admin View\n                                           </button>\n                                                <LogOutButton />\n                                            </div>\n                                            :\n                                            <div>\n                                                <h1>Facilitator Login</h1>\n                                                <form onSubmit={this.login}>\n                                                    <div>\n                                                        <label htmlFor=\"username\">\n                                                            Username:\n                                                        <input\n                                                                type=\"text\"\n                                                                name=\"username\"\n                                                                value={this.state.username}\n                                                                onChange={this.handleInputChangeFor('username')}\n                                                            />\n                                                        </label>\n                                                    </div>\n                                                    <div>\n                                                        <label htmlFor=\"password\">\n                                                            Password:\n                                                        <input\n                                                                type=\"password\"\n                                                                name=\"password\"\n                                                                value={this.state.password}\n                                                                onChange={this.handleInputChangeFor('password')}\n                                                            />\n                                                        </label>\n                                                    </div>\n                                                    <div>\n                                                        <input\n                                                            className=\"log-in\"\n                                                            type=\"submit\"\n                                                            name=\"submit\"\n                                                            value=\"Log In\"\n                                                        />\n                                                    </div>\n                                                </form>\n                                                <button onClick={() => this.props.dispatch({ type: 'SET_USER_TYPE', payload: 'player' })}>Back To Player Home</button>\n                                            </div>\n                                        }\n                                    </div>\n                                }\n                            </div>\n                            :\n                            null\n                    }\n                    {this.props.state.game.gameState[0] > 0 && this.props.state.game.gameState[0] < 6 &&\n                        <div>\n                            {this.props.state.game.gameState[1] == '0' &&\n                                <div>\n                                    <h1>Round Intro</h1>\n                                    <h2>Round: {this.props.state.game.roundNumber}</h2>\n                                </div>\n                            }\n                            {this.props.state.game.gameState[1] == '1' &&\n                                <div>\n                                    <h1>Answer Card</h1>\n                                    <h2>Round: {this.props.state.game.roundNumber}</h2>\n                                    {this.props.state.user.userReducer && this.props.state.user.userReducer.is_facilitator ?\n                                        <div>\n                                            <ol>\n                                                {this.props.state.game.allPlayers.map(player => {\n                                                    return (\n                                                        <li key={player.id}>{player.name} ready: {player.in_discussion ? <p>yes</p> : <p>no</p>}</li>\n                                                    )\n                                                })}\n                                            </ol>\n                                        </div>\n                                        :\n                                        <div>\n                                            <textarea\n                                                type=\"text\"\n                                                placeholder=\"Answer the question please\"\n                                                onChange={this.handleInputChangeFor('response')}\n                                            />\n                                            <button\n                                                onClick={() => this.props.editJournal(this.state.response)}\n                                            >\n                                                Save\n                                        </button>\n                                            <button\n                                                onClick={() => {\n                                                    this.props.editJournal(this.state.response)\n                                                    this.props.advanceToDiscussion(this.props.state.game.player.id);\n                                                }}\n                                            >\n                                                Save and continue\n                                        </button>\n                                        </div>\n                                    }\n                                </div>\n                            }\n                            {this.props.state.game.gameState[1] == '2' &&\n                                <div>\n                                    <h1>Discussion Phase</h1>\n                                    <h2>Round: {this.props.state.game.roundNumber}</h2>\n                                    {this.props.state.user.userReducer && this.props.state.user.userReducer.is_facilitator &&\n                                        <ol>\n                                            <h5>Select a Player to speak</h5>\n                                            {this.props.state.game.allPlayers.map(player => {\n                                                if (player.in_discussion && !player.discussed) {\n                                                    return (\n                                                        <li key={player.id}>Name: {player.name} {!this.props.state.game.selectedPlayer.id && //only show the select button when there is no selected player\n                                                            <button\n                                                                onClick={() => this.props.selectPlayer(player)}\n                                                            >Select</button>}</li>\n                                                    );\n                                                }\n                                            })\n                                            }\n                                        </ol>\n                                    }\n                                    <h2>Spoken</h2>\n                                    <ol>\n                                        {this.props.state.game.allPlayers.map(player => {\n                                            if (player.discussed === true) {\n                                                return (\n                                                    <li key={player.id}>Name: {player.name}</li>\n                                                );\n                                            }\n                                        })}\n                                    </ol>\n                                </div>\n                            }\n                        </div>\n                    }\n                    {this.props.state.game.gameState[0] == '6' &&\n                        <div>\n                            <h1>Final Reflection</h1>\n                            {this.props.state.user.userReducer && this.props.state.user.userReducer.is_facilitator &&\n                                <LogOutButton />\n                            }\n                        </div>\n                    }\n\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    state,\n});\n\nexport default withRouter (connect(mapStateToProps)(ActionPanel));","/** receiver.js\n * module for converting custom actions to redux actions\n * case switch calls appropriate subfunction based on action type\n */\n\n//function receives actions and routes them to their proper handlers\nconst receiver = (action) => { //receiver must return a redux action\n    switch (action.type) {\n        case ('advance'):\n            return (advance(action));\n        case ('discussion'):\n            return (discussion(action));\n        case ('journal'):\n            return (journal(action));\n        case ('join'):\n            return (join(action));\n    }\n}\n\nconst advance = action => { //returns redux action to advance game state\n    const reduxAction = {\n        type: 'UPDATE_GAME_STATE',\n        payload: {\n            newGameState: action.data.newGameState,\n            fetchPlayers: action.data.resetDiscussion,\n        }\n    }\n    return reduxAction;\n}\n\nconst journal = action => { //returns redux action to update intention or journal\n    let reduxAction;\n    if (action.intention) { //if intention boolean is set to true\n        reduxAction = {\n            type: 'UPDATE_INTENTION', //update journal intention\n            payload: {\n                intention: action.data.intention,\n            }\n        }\n    }\n    else { //else update the journal body\n        reduxAction = {\n            type: 'UPDATE_JOURNAL_QUESTION',\n            payload: {\n                question: action.data.question,\n                response: action.data.response,\n                roundNumber: action.data.roundNumber,\n                playerId: action.data.playerId,\n            }\n        }\n    }\n    return reduxAction;\n}\n\nconst join = action => { //returns array of two actions to handle join actions\n    const actions = [];\n    //action one sets the joining players info into redux\n    const reduxActionOne = {\n        type: 'FETCH_PLAYER',\n        payload: action.data.id,\n        \n    }\n    //action two sets the game id into redux state\n    actions.push(reduxActionOne);\n    const reduxActionTwo = {\n        type: 'FETCH_GAME',\n        payload: action.game\n    }\n    actions.push(reduxActionTwo);\n    //action three gets all of the other players\n    const reduxActionThree = {\n        type: 'FETCH_PLAYERS',\n        payload: action.game\n    }\n    actions.push(reduxActionThree);\n    return actions;\n}\n\nconst discussion = action => { //returns action that sets selected player in redux state (for display)\n    const reduxAction = {\n        type: 'SET_SELECTED_PLAYER',\n        payload: {\n            player: action.data.player,\n        }\n    }\n    return reduxAction;\n}\n\nexport default receiver;","import React, { Component } from 'react';\nimport {\n  HashRouter as Router,\n  Route,\n  Redirect,\n  Switch,\n  Link\n} from 'react-router-dom';\n\nimport { connect } from 'react-redux';\n\nimport Nav from '../Nav/Nav';\nimport Footer from '../Footer/Footer';\nimport Background from './Background';\n\nimport ProtectedRoute from '../ProtectedRoute/ProtectedRoute'\n\nimport AboutPage from '../AboutPage/AboutPage';\nimport UserPage from '../UserPage/UserPage';\nimport CardPage from '../InfoPage/InfoPage';\nimport AdminPage from '../AdminPage/AdminPage';\nimport ResultsPage from '../ResultsPage/ResultsPage';\nimport Game from '../Game/Game';\n\nimport '../../stylesheets/main.css';\nimport PreGame from '../Game/PreGame/PreGame';\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.dispatch({ type: 'FETCH_USER' })\n  }\n\n  render() {\n    return (\n      <Router>\n        <div>\n          <Switch>\n            <Redirect exact from=\"/\" to=\"/home/game\" />\n            <Redirect exact from=\"/home\" to=\"/home/game\" />\n            <Route\n              exact\n              path=\"/home/game\"\n              render={()=> { return (<React.Fragment><Background><Game/></Background ></React.Fragment>);}}\n            />\n            <Route\n              exact\n              path=\"/cards\"\n              render={()=> { return (<React.Fragment><Nav /> <CardPage /> </React.Fragment>);}}\n            />\n            <Route\n              exact\n              path=\"/admin\"\n              render={()=> { return (<React.Fragment><Nav /> <AdminPage /> </React.Fragment>);}}\n            />\n            <Route\n              path=\"/results\"\n              component={ResultsPage}\n            />\n            <Route render={() => <h1>404</h1>} />\n          </Switch>\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default connect()(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga';\nimport logger from 'redux-logger';\nimport './stylesheets/main.css';\n\nimport rootReducer from './redux/reducers'; // imports ./redux/reducers/index.js\nimport rootSaga from './redux/sagas'; // imports ./redux/sagas/index.js\n\nimport App from './components/App/App';\n\n// import bootstrap from 'bootstrap';\n// import 'bootstrap/dist/css/bootstrap.min.css';\n// import 'bootstrap/dist/js/bootstrap.bundle.min';\n// import Popper from 'popper.js';\n\n\nconst sagaMiddleware = createSagaMiddleware();\n\n// this line creates an array of all of redux middleware you want to use\n// we don't want a whole ton of console logs in our production code\n// logger will only be added to your project if your in development mode\nconst middlewareList = process.env.NODE_ENV === 'development' ?\n  [sagaMiddleware, logger] :\n  [sagaMiddleware];\n\nconst store = createStore(\n  // tells the saga middleware to use the rootReducer\n  // rootSaga contains all of our other reducers\n  rootReducer,\n  // adds all middleware to our project including saga and logger\n  applyMiddleware(...middlewareList),\n);\n\n// tells the saga middleware to use the rootSaga\n// rootSaga contains all of our other sagas\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <Provider store={store} className=\"overflowHidden\">\n    <App />\n  </Provider>,\n  document.getElementById('react-root'),\n);\n"],"sourceRoot":""}